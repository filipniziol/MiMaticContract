{
  "version": "3.2",
  "log": [
    {
      "AaveUserData": {
        "src": "contracts\\AaveUserData.sol:7",
        "version": {
          "withMetadata": "9feb44085d3477e07364075a7386737ff3b3bbd582cf4b75f94d496cb7d9ff2a",
          "withoutMetadata": "de0e7863fcf3dae322704507e4c31b0467e5ea973e0ed137e4e9741d69c17537",
          "linkedWithoutMetadata": "de0e7863fcf3dae322704507e4c31b0467e5ea973e0ed137e4e9741d69c17537"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "getUserData(address)",
          "getDebtBalance(address,address)",
          "getCollateralalance(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AaveUserData",
            "src": "contracts\\AaveUserData.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AaveUserData",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\AaveUserData.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAaveWETHGateway": {
        "src": "contracts\\Interfaces.sol:749",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawETH(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAmToken": {
        "src": "contracts\\Interfaces.sol:742",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICamToken": {
        "src": "contracts\\Interfaces.sol:733",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "Token()",
          "leave(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICurve": {
        "src": "contracts\\Interfaces.sol:89",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange_underlying(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:119",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIronSwap": {
        "src": "contracts\\Interfaces.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:182",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:136",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:578",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidatorV2": {
        "src": "contracts\\Interfaces.sol:588",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IReserve": {
        "src": "contracts\\Interfaces.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "symbol()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:598",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:692",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:157",
        "version": {
          "withMetadata": "1f3f413e747afad3cf85aa7148ba6366f3a83ade51e1d91473ffa5b45c9189ce",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:272",
        "version": {
          "withMetadata": "5aeaf4d0a7e88330c4315726c297fc61d752c2c8fb8a16117211cd255f516042",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:224",
        "version": {
          "withMetadata": "4ad201a997fede3aaf3812fa31bb87abb144934b14f4a3a0c81be4aa153d1c44",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:9",
        "version": {
          "withMetadata": "e72b365b9104f9d168b21eda80dc6dbe93c350fb57cdbd585a73c8dec02d864f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AaveUserData": {
        "src": "contracts\\AaveUserData.sol:7",
        "version": {
          "withMetadata": "e0255ee02b0a46316f8b8d303ca5741ebba3c914f70972b9a1258d323dbdf6d7",
          "withoutMetadata": "f0c860170d7660c3b874e14f37bf5e3c62b5fe075410935ae777e21076af71d9",
          "linkedWithoutMetadata": "f0c860170d7660c3b874e14f37bf5e3c62b5fe075410935ae777e21076af71d9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "getUserData(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AaveUserData",
            "src": "contracts\\AaveUserData.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AaveUserData",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\AaveUserData.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAaveWETHGateway": {
        "src": "contracts\\Interfaces.sol:749",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawETH(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAmToken": {
        "src": "contracts\\Interfaces.sol:742",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICamToken": {
        "src": "contracts\\Interfaces.sol:733",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "Token()",
          "leave(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICurve": {
        "src": "contracts\\Interfaces.sol:89",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange_underlying(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:119",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIronSwap": {
        "src": "contracts\\Interfaces.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:182",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:136",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:578",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidatorV2": {
        "src": "contracts\\Interfaces.sol:588",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IReserve": {
        "src": "contracts\\Interfaces.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "symbol()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:598",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:692",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:157",
        "version": {
          "withMetadata": "1f3f413e747afad3cf85aa7148ba6366f3a83ade51e1d91473ffa5b45c9189ce",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:272",
        "version": {
          "withMetadata": "5aeaf4d0a7e88330c4315726c297fc61d752c2c8fb8a16117211cd255f516042",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:224",
        "version": {
          "withMetadata": "4ad201a997fede3aaf3812fa31bb87abb144934b14f4a3a0c81be4aa153d1c44",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:9",
        "version": {
          "withMetadata": "e72b365b9104f9d168b21eda80dc6dbe93c350fb57cdbd585a73c8dec02d864f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AaveUserData": {
        "src": "contracts\\AaveUserData.sol:7",
        "version": {
          "withMetadata": "6e03501d124cc6bda10ac774bd69a9db496fc437e551d6b9fca95cac7ad73d11",
          "withoutMetadata": "7c52e956ace385232cc49f45d2151057b23799405fc18fe7ca4d301deac32cb5",
          "linkedWithoutMetadata": "7c52e956ace385232cc49f45d2151057b23799405fc18fe7ca4d301deac32cb5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "getUserData(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AaveUserData",
            "src": "contracts\\AaveUserData.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AaveUserData",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\AaveUserData.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)591",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)955",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)591": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)955": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAaveWETHGateway": {
        "src": "contracts\\Interfaces.sol:749",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawETH(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAmToken": {
        "src": "contracts\\Interfaces.sol:742",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICamToken": {
        "src": "contracts\\Interfaces.sol:733",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "Token()",
          "leave(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICurve": {
        "src": "contracts\\Interfaces.sol:89",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange_underlying(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:119",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIronSwap": {
        "src": "contracts\\Interfaces.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:182",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:136",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:578",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidatorV2": {
        "src": "contracts\\Interfaces.sol:588",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IReserve": {
        "src": "contracts\\Interfaces.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "symbol()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:598",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:692",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IronFinanceProcessor": {
        "src": "contracts\\IronFinanceProcessor.sol:8",
        "version": {
          "withMetadata": "0efc83f9dd046f9201ca59c689f2b845de8457bf14ba11db316fa83a09dedd17",
          "withoutMetadata": "f6fac99992000fc78c056d09403f80940003fc41c56af514cd8b186ef083bf7d",
          "linkedWithoutMetadata": "f6fac99992000fc78c056d09403f80940003fc41c56af514cd8b186ef083bf7d"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "process(uint256,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "withdrawToken(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IronFinanceProcessor",
            "src": "contracts\\IronFinanceProcessor.sol:44"
          },
          {
            "kind": "state-variable-assignment",
            "name": "usdc",
            "src": "contracts\\IronFinanceProcessor.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "usdt",
            "src": "contracts\\IronFinanceProcessor.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "dai",
            "src": "contracts\\IronFinanceProcessor.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "curveExchange",
            "src": "contracts\\IronFinanceProcessor.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ironFinanceCoins",
            "src": "contracts\\IronFinanceProcessor.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ironFinanceIron",
            "src": "contracts\\IronFinanceProcessor.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ironIS3USD",
            "src": "contracts\\IronFinanceProcessor.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ironIS3USDLP",
            "src": "contracts\\IronFinanceProcessor.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "IronFinanceProcessor",
              "label": "lendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)591",
              "src": "contracts\\IronFinanceProcessor.sol:11"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdc",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:12"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdt",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:13"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "dai",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:14"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdcAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:16"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdtAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:17"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "lendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:19"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "curveExchange",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:21"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironFinanceCoins",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:23"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironFinanceIron",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:24"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironIS3USD",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:26"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironIS3USDLP",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:27"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdcCurrentAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:29"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdtCurrentAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:30"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdcExpectedAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:32"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdtExpectedAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:33"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "neededUsdcAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:35"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "neededUsdtAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:36"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "daiCurrentAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:38"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "IS3USDBalance",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:40"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironIS3USDLPBalance",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:41"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironIS3USDBalance",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:42"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)591": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:157",
        "version": {
          "withMetadata": "1f3f413e747afad3cf85aa7148ba6366f3a83ade51e1d91473ffa5b45c9189ce",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:272",
        "version": {
          "withMetadata": "5aeaf4d0a7e88330c4315726c297fc61d752c2c8fb8a16117211cd255f516042",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:224",
        "version": {
          "withMetadata": "4ad201a997fede3aaf3812fa31bb87abb144934b14f4a3a0c81be4aa153d1c44",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:9",
        "version": {
          "withMetadata": "e72b365b9104f9d168b21eda80dc6dbe93c350fb57cdbd585a73c8dec02d864f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "b581e0e887854a24d3afd2d2eca64ffde46ae1c4ec5e6af0f9e45808add5fbdb",
          "withoutMetadata": "302b0748d7d9d751e411d53785ffebf5ec542e15dad7b3167f817cf07b431a45",
          "linkedWithoutMetadata": "302b0748d7d9d751e411d53785ffebf5ec542e15dad7b3167f817cf07b431a45"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MiMaticLiquidate.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)976",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)591",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1390",
              "src": "contracts\\MiMaticLiquidate.sol:14"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)386",
              "src": "contracts\\MiMaticLiquidate.sol:15"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)386",
              "src": "contracts\\MiMaticLiquidate.sol:16"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:18"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidate.sol:19"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:21"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:22"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:23"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:24"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)976": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)591": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1390": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)386": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateCamToken": {
        "src": "contracts\\MiMaticLiquidateCamToken.sol:10",
        "version": {
          "withMetadata": "8cc5c47e62ee8993367fa67e206ffc5ef5d8d819d72e2b06e1461ebceb2de4ad",
          "withoutMetadata": "c91e41a0e28688d48ec4c169ac03d94912de06ee00d2e362364107702d655d0b",
          "linkedWithoutMetadata": "c91e41a0e28688d48ec4c169ac03d94912de06ee00d2e362364107702d655d0b"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256,address,address,address,address)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "rugPull()",
          "withdrawToken(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateCamToken",
            "src": "contracts\\MiMaticLiquidateCamToken.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)591",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:14"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1390",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:15"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "usdc",
              "type": "t_contract(IERC20)386",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:16"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "miMatic",
              "type": "t_contract(IERC20)386",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:17"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:19"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:21"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:22"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:23"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:24"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:25"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "qiLiquidator",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:26"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:27"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:28"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camTokenShare",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:29"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amTokenBalance",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:30"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:32"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)591": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1390": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)386": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateCamWMatic": {
        "src": "contracts\\MiMaticLiquidateCamWMatic.sol:10",
        "version": {
          "withMetadata": "914a55213bbbf257e229139edd6b4cdefdab830dea313d1939eb3900b3e0c645",
          "withoutMetadata": "3e8975d6c57854becf538548a494663daedb1744f463ed1e9599f4f7ab08a108",
          "linkedWithoutMetadata": "3e8975d6c57854becf538548a494663daedb1744f463ed1e9599f4f7ab08a108"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "setCamToken(address)",
          "setAaveWETHGateway(address)",
          "executeFlashLoan(address,uint256,bytes)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateCamWMatic",
            "src": "contracts\\MiMaticLiquidateCamWMatic.sol:33"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MiMaticLiquidateCamWMatic.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidatorV2)999",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:14"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)591",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:15"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1390",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:16"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "usdc",
              "type": "t_contract(IERC20)386",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:17"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "miMatic",
              "type": "t_contract(IERC20)386",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:18"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "camToken",
              "type": "t_contract(ICamToken)1408",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:20"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "amToken",
              "type": "t_contract(IAmToken)1425",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:21"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "aaveWETHGateway",
              "type": "t_contract(IAaveWETHGateway)1435",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:22"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:24"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:26"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:28"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:29"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:30"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:31"
            }
          ],
          "types": {
            "t_contract(IQiLiquidatorV2)999": {
              "label": "contract IQiLiquidatorV2"
            },
            "t_contract(ILendingPoolAddressesProvider)591": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1390": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)386": {
              "label": "contract IERC20"
            },
            "t_contract(ICamToken)1408": {
              "label": "contract ICamToken"
            },
            "t_contract(IAmToken)1425": {
              "label": "contract IAmToken"
            },
            "t_contract(IAaveWETHGateway)1435": {
              "label": "contract IAaveWETHGateway"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateToken": {
        "src": "contracts\\MiMaticLiquidateToken.sol:10",
        "version": {
          "withMetadata": "66308eb7d14d82ad02ad6751b7cbfba52ba2e51522000ce0d20f80a46c4754bd",
          "withoutMetadata": "ef64ee00b45564cff058c57d0426fd46ea58020d4e65942b34eafa1f9c86d75f",
          "linkedWithoutMetadata": "ef64ee00b45564cff058c57d0426fd46ea58020d4e65942b34eafa1f9c86d75f"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256,bytes)",
          "liquidateVault(uint256,uint256,address,address)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateToken",
            "src": "contracts\\MiMaticLiquidateToken.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateToken",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)591",
              "src": "contracts\\MiMaticLiquidateToken.sol:14"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1390",
              "src": "contracts\\MiMaticLiquidateToken.sol:15"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "usdc",
              "type": "t_contract(IERC20)386",
              "src": "contracts\\MiMaticLiquidateToken.sol:16"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "miMatic",
              "type": "t_contract(IERC20)386",
              "src": "contracts\\MiMaticLiquidateToken.sol:17"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateToken.sol:19"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateToken.sol:21"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateToken.sol:22"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateToken.sol:23"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateToken.sol:24"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "liquidatedToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateToken.sol:25"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "qiLiquidator",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateToken.sol:26"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateToken.sol:28"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)591": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1390": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)386": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPool": {
        "src": "contracts\\TestLendingPool.sol:6",
        "version": {
          "withMetadata": "2c7f69aeca7d74d696b4508dddc9e526771d8c64934fc9ebb45153afd5f6fdb9",
          "withoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce",
          "linkedWithoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPoolAddressesProvider": {
        "src": "contracts\\TestLendingPoolAddressesProvider.sol:15",
        "version": {
          "withMetadata": "983e4a73d4c20a97ff8c34ad7330dc2ef26233c56978a73af3d021a81bc36a61",
          "withoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa",
          "linkedWithoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa"
        },
        "inherit": [
          "ILendingPoolAddressesProvider",
          "Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getMarketId()",
          "setMarketId(string)",
          "setAddressAsProxy(bytes32,address)",
          "setAddress(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestLendingPoolAddressesProvider",
            "src": "contracts\\TestLendingPoolAddressesProvider.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_marketId",
              "type": "t_string_storage",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:16"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_addresses",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:17"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestQiLiquidator": {
        "src": "contracts\\TestQiLiquidator.sol:5",
        "version": {
          "withMetadata": "a530b1f14cbce15ed802ec5fd7d1a2b60603ed11eab1641f718c3b8cb562d77a",
          "withoutMetadata": "74fd0d1dfd9a6c873e958684e97409a43addefa340a991d614a7da0a1b5e10e5",
          "linkedWithoutMetadata": "74fd0d1dfd9a6c873e958684e97409a43addefa340a991d614a7da0a1b5e10e5"
        },
        "inherit": [
          "IQiLiquidator"
        ],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestUniswapV2Router02": {
        "src": "contracts\\TestUniswapV2Router02.sol:5",
        "version": {
          "withMetadata": "5dad4e1f5e5e398d03124898ecd103644012982a323f892e1847519df61045bc",
          "withoutMetadata": "17198e4e0c495ab244833b58b7a006b59fa9771a56b69cc92c28f83e8b8fa0d2",
          "linkedWithoutMetadata": "17198e4e0c495ab244833b58b7a006b59fa9771a56b69cc92c28f83e8b8fa0d2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "WETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "18a03b8369e1029dfb474452b21de212aa2ba35a366c87ab4f51ab06428488bd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AaveUserData": {
        "src": "contracts\\AaveUserData.sol:24",
        "version": {
          "withMetadata": "5c69864e5565fa91c5d08538776d3e4230915cb1c5bf1c86b057aaca8da1813c",
          "withoutMetadata": "9fb42dd59445604a76060b58ef896946ba8db3d751facee16c186c6995011254",
          "linkedWithoutMetadata": "9fb42dd59445604a76060b58ef896946ba8db3d751facee16c186c6995011254"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "getUserData(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AaveUserData",
            "src": "contracts\\AaveUserData.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AaveUserData",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\AaveUserData.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:178",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAaveWETHGateway": {
        "src": "contracts\\Interfaces.sol:745",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawETH(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAmToken": {
        "src": "contracts\\Interfaces.sol:738",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICamToken": {
        "src": "contracts\\Interfaces.sol:729",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "Token()",
          "leave(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICurve": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange_underlying(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIronSwap": {
        "src": "contracts\\Interfaces.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:132",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:574",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidatorV2": {
        "src": "contracts\\Interfaces.sol:584",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:594",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:688",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:157",
        "version": {
          "withMetadata": "51786a1964353529e00672c8c5d8972c68d5d46b9ba15f57342df247cf8f85da",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:272",
        "version": {
          "withMetadata": "bf977527aff0abf4d40134e098572112f5f67a74a9a46c41093b3d6aa05128c9",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:224",
        "version": {
          "withMetadata": "938723b4e376eda964067bb5f0a7462fbdc8d8c6f67d06079d1151f12a577b81",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:9",
        "version": {
          "withMetadata": "0ede2230e77680e1617bf87f9e88d5d437ab45d790c6a8beca6188eda6e33ee4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AaveUserData": {
        "src": "contracts\\AaveUserData.sol:24",
        "version": {
          "withMetadata": "d44a768d52e305c7f23622038b3f03a85d8c9cec415d235de9fdea943a22dd0e",
          "withoutMetadata": "4fa38648143de60a3f31ce3ce001e36be10b623f05e3a954ce028f6b902f2823",
          "linkedWithoutMetadata": "4fa38648143de60a3f31ce3ce001e36be10b623f05e3a954ce028f6b902f2823"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "getUserData(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AaveUserData",
            "src": "contracts\\AaveUserData.sol:42"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AaveUserData",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\AaveUserData.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:178",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAaveWETHGateway": {
        "src": "contracts\\Interfaces.sol:745",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawETH(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAmToken": {
        "src": "contracts\\Interfaces.sol:738",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICamToken": {
        "src": "contracts\\Interfaces.sol:729",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "Token()",
          "leave(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICurve": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange_underlying(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIronSwap": {
        "src": "contracts\\Interfaces.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:132",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:574",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidatorV2": {
        "src": "contracts\\Interfaces.sol:584",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:594",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:688",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:157",
        "version": {
          "withMetadata": "51786a1964353529e00672c8c5d8972c68d5d46b9ba15f57342df247cf8f85da",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:272",
        "version": {
          "withMetadata": "bf977527aff0abf4d40134e098572112f5f67a74a9a46c41093b3d6aa05128c9",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:224",
        "version": {
          "withMetadata": "938723b4e376eda964067bb5f0a7462fbdc8d8c6f67d06079d1151f12a577b81",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:9",
        "version": {
          "withMetadata": "0ede2230e77680e1617bf87f9e88d5d437ab45d790c6a8beca6188eda6e33ee4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AaveUserData": {
        "src": "contracts\\AaveUserData.sol:24",
        "version": {
          "withMetadata": "80cbdd0c60ee7a54282f51e83e804eb956d5168c025475dbe72ab25a150623e7",
          "withoutMetadata": "fb2c06f5b8dbb2ef37cd63cb5ef94a5d568a2bb53879bb7442c53b30dc0da226",
          "linkedWithoutMetadata": "fb2c06f5b8dbb2ef37cd63cb5ef94a5d568a2bb53879bb7442c53b30dc0da226"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "getUserData(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AaveUserData",
            "src": "contracts\\AaveUserData.sol:42"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AaveUserData",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\AaveUserData.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:178",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)456",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)820",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)456": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)820": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAaveWETHGateway": {
        "src": "contracts\\Interfaces.sol:745",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawETH(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAmToken": {
        "src": "contracts\\Interfaces.sol:738",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICamToken": {
        "src": "contracts\\Interfaces.sol:729",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "Token()",
          "leave(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICurve": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange_underlying(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIronSwap": {
        "src": "contracts\\Interfaces.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:132",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:574",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidatorV2": {
        "src": "contracts\\Interfaces.sol:584",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:594",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:688",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IronFinanceProcessor": {
        "src": "contracts\\IronFinanceProcessor.sol:8",
        "version": {
          "withMetadata": "f1f62270c7ba97071e809f2299fdcedc914d9579d86e17992033ae8cc286bde5",
          "withoutMetadata": "f6fac99992000fc78c056d09403f80940003fc41c56af514cd8b186ef083bf7d",
          "linkedWithoutMetadata": "f6fac99992000fc78c056d09403f80940003fc41c56af514cd8b186ef083bf7d"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "process(uint256,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "withdrawToken(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IronFinanceProcessor",
            "src": "contracts\\IronFinanceProcessor.sol:44"
          },
          {
            "kind": "state-variable-assignment",
            "name": "usdc",
            "src": "contracts\\IronFinanceProcessor.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "usdt",
            "src": "contracts\\IronFinanceProcessor.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "dai",
            "src": "contracts\\IronFinanceProcessor.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "curveExchange",
            "src": "contracts\\IronFinanceProcessor.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ironFinanceCoins",
            "src": "contracts\\IronFinanceProcessor.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ironFinanceIron",
            "src": "contracts\\IronFinanceProcessor.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ironIS3USD",
            "src": "contracts\\IronFinanceProcessor.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ironIS3USDLP",
            "src": "contracts\\IronFinanceProcessor.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "IronFinanceProcessor",
              "label": "lendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)456",
              "src": "contracts\\IronFinanceProcessor.sol:11"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdc",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:12"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdt",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:13"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "dai",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:14"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdcAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:16"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdtAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:17"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "lendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:19"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "curveExchange",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:21"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironFinanceCoins",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:23"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironFinanceIron",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:24"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironIS3USD",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:26"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironIS3USDLP",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:27"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdcCurrentAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:29"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdtCurrentAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:30"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdcExpectedAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:32"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdtExpectedAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:33"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "neededUsdcAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:35"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "neededUsdtAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:36"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "daiCurrentAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:38"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "IS3USDBalance",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:40"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironIS3USDLPBalance",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:41"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironIS3USDBalance",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:42"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)456": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:157",
        "version": {
          "withMetadata": "51786a1964353529e00672c8c5d8972c68d5d46b9ba15f57342df247cf8f85da",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:272",
        "version": {
          "withMetadata": "bf977527aff0abf4d40134e098572112f5f67a74a9a46c41093b3d6aa05128c9",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:224",
        "version": {
          "withMetadata": "938723b4e376eda964067bb5f0a7462fbdc8d8c6f67d06079d1151f12a577b81",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:9",
        "version": {
          "withMetadata": "0ede2230e77680e1617bf87f9e88d5d437ab45d790c6a8beca6188eda6e33ee4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "6177ee2b4a6e7d304480ee71ff353bfe16b4368c30c477cf9e04bde73ceba290",
          "withoutMetadata": "302b0748d7d9d751e411d53785ffebf5ec542e15dad7b3167f817cf07b431a45",
          "linkedWithoutMetadata": "302b0748d7d9d751e411d53785ffebf5ec542e15dad7b3167f817cf07b431a45"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MiMaticLiquidate.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)841",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)456",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1255",
              "src": "contracts\\MiMaticLiquidate.sol:14"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)251",
              "src": "contracts\\MiMaticLiquidate.sol:15"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)251",
              "src": "contracts\\MiMaticLiquidate.sol:16"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:18"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidate.sol:19"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:21"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:22"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:23"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:24"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)841": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)456": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1255": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)251": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateCamToken": {
        "src": "contracts\\MiMaticLiquidateCamToken.sol:10",
        "version": {
          "withMetadata": "cbe726a98e25e40ece7f03bf46961b9c68ba91acda1076a651d32f0b417b03eb",
          "withoutMetadata": "c91e41a0e28688d48ec4c169ac03d94912de06ee00d2e362364107702d655d0b",
          "linkedWithoutMetadata": "c91e41a0e28688d48ec4c169ac03d94912de06ee00d2e362364107702d655d0b"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256,address,address,address,address)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "rugPull()",
          "withdrawToken(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateCamToken",
            "src": "contracts\\MiMaticLiquidateCamToken.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)456",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:14"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1255",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:15"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "usdc",
              "type": "t_contract(IERC20)251",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:16"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "miMatic",
              "type": "t_contract(IERC20)251",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:17"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:19"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:21"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:22"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:23"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:24"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:25"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "qiLiquidator",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:26"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:27"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:28"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camTokenShare",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:29"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amTokenBalance",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:30"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:32"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)456": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1255": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)251": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateCamWMatic": {
        "src": "contracts\\MiMaticLiquidateCamWMatic.sol:10",
        "version": {
          "withMetadata": "1c79e5c0f308202cc0265674ddb359a8a26df0be1ac0eda868d0f5fdaedfbec7",
          "withoutMetadata": "3e8975d6c57854becf538548a494663daedb1744f463ed1e9599f4f7ab08a108",
          "linkedWithoutMetadata": "3e8975d6c57854becf538548a494663daedb1744f463ed1e9599f4f7ab08a108"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "setCamToken(address)",
          "setAaveWETHGateway(address)",
          "executeFlashLoan(address,uint256,bytes)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateCamWMatic",
            "src": "contracts\\MiMaticLiquidateCamWMatic.sol:33"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MiMaticLiquidateCamWMatic.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidatorV2)864",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:14"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)456",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:15"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1255",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:16"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "usdc",
              "type": "t_contract(IERC20)251",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:17"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "miMatic",
              "type": "t_contract(IERC20)251",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:18"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "camToken",
              "type": "t_contract(ICamToken)1273",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:20"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "amToken",
              "type": "t_contract(IAmToken)1290",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:21"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "aaveWETHGateway",
              "type": "t_contract(IAaveWETHGateway)1300",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:22"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:24"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:26"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:28"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:29"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:30"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:31"
            }
          ],
          "types": {
            "t_contract(IQiLiquidatorV2)864": {
              "label": "contract IQiLiquidatorV2"
            },
            "t_contract(ILendingPoolAddressesProvider)456": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1255": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)251": {
              "label": "contract IERC20"
            },
            "t_contract(ICamToken)1273": {
              "label": "contract ICamToken"
            },
            "t_contract(IAmToken)1290": {
              "label": "contract IAmToken"
            },
            "t_contract(IAaveWETHGateway)1300": {
              "label": "contract IAaveWETHGateway"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateToken": {
        "src": "contracts\\MiMaticLiquidateToken.sol:10",
        "version": {
          "withMetadata": "1ca34b70c40053aad0c6756f101b37f08e58d3964c5fbdfab286771d4fa8b48a",
          "withoutMetadata": "ef64ee00b45564cff058c57d0426fd46ea58020d4e65942b34eafa1f9c86d75f",
          "linkedWithoutMetadata": "ef64ee00b45564cff058c57d0426fd46ea58020d4e65942b34eafa1f9c86d75f"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256,bytes)",
          "liquidateVault(uint256,uint256,address,address)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateToken",
            "src": "contracts\\MiMaticLiquidateToken.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateToken",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)456",
              "src": "contracts\\MiMaticLiquidateToken.sol:14"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1255",
              "src": "contracts\\MiMaticLiquidateToken.sol:15"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "usdc",
              "type": "t_contract(IERC20)251",
              "src": "contracts\\MiMaticLiquidateToken.sol:16"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "miMatic",
              "type": "t_contract(IERC20)251",
              "src": "contracts\\MiMaticLiquidateToken.sol:17"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateToken.sol:19"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateToken.sol:21"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateToken.sol:22"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateToken.sol:23"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateToken.sol:24"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "liquidatedToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateToken.sol:25"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "qiLiquidator",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateToken.sol:26"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateToken.sol:28"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)456": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1255": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)251": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPool": {
        "src": "contracts\\TestLendingPool.sol:6",
        "version": {
          "withMetadata": "a03079d3575963b39cf903e85ac6892819af07ab47846dc313018a80f8a52f32",
          "withoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce",
          "linkedWithoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPoolAddressesProvider": {
        "src": "contracts\\TestLendingPoolAddressesProvider.sol:15",
        "version": {
          "withMetadata": "5c42ff333a3d527ed304063682f07cc5a40754dd96f96c7adf19c1843e1f3360",
          "withoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa",
          "linkedWithoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa"
        },
        "inherit": [
          "ILendingPoolAddressesProvider",
          "Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getMarketId()",
          "setMarketId(string)",
          "setAddressAsProxy(bytes32,address)",
          "setAddress(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestLendingPoolAddressesProvider",
            "src": "contracts\\TestLendingPoolAddressesProvider.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_marketId",
              "type": "t_string_storage",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:16"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_addresses",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:17"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestQiLiquidator": {
        "src": "contracts\\TestQiLiquidator.sol:5",
        "version": {
          "withMetadata": "e755ce4caa6c67453ce4e24b6dd3dde980d3c1916b54575affa988fc7f5f999b",
          "withoutMetadata": "74fd0d1dfd9a6c873e958684e97409a43addefa340a991d614a7da0a1b5e10e5",
          "linkedWithoutMetadata": "74fd0d1dfd9a6c873e958684e97409a43addefa340a991d614a7da0a1b5e10e5"
        },
        "inherit": [
          "IQiLiquidator"
        ],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestUniswapV2Router02": {
        "src": "contracts\\TestUniswapV2Router02.sol:5",
        "version": {
          "withMetadata": "ecf281cf8ba53acd7344ca4745fda1565c4381c543a78eaf64c4f3bb4791f0f5",
          "withoutMetadata": "17198e4e0c495ab244833b58b7a006b59fa9771a56b69cc92c28f83e8b8fa0d2",
          "linkedWithoutMetadata": "17198e4e0c495ab244833b58b7a006b59fa9771a56b69cc92c28f83e8b8fa0d2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "WETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "18a03b8369e1029dfb474452b21de212aa2ba35a366c87ab4f51ab06428488bd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AaveUserData": {
        "src": "contracts\\AaveUserData.sol:17",
        "version": {
          "withMetadata": "656d55a4c4db31e4249b85681aaff78fb5911239d4fe36358893de5c66797748",
          "withoutMetadata": "9623c52ec73dee861c5b8e4f10cdbe081241f78719ccdf9f0552f39ace6fae66",
          "linkedWithoutMetadata": "9623c52ec73dee861c5b8e4f10cdbe081241f78719ccdf9f0552f39ace6fae66"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "getUserData(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AaveUserData",
            "src": "contracts\\AaveUserData.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AaveUserData",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\AaveUserData.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\AaveUserData.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserAccountData(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)332",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)696",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)332": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)696": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAaveWETHGateway": {
        "src": "contracts\\Interfaces.sol:745",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawETH(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAmToken": {
        "src": "contracts\\Interfaces.sol:738",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICamToken": {
        "src": "contracts\\Interfaces.sol:729",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "Token()",
          "leave(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICurve": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange_underlying(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIronSwap": {
        "src": "contracts\\Interfaces.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:178",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:132",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:574",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidatorV2": {
        "src": "contracts\\Interfaces.sol:584",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:594",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:688",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IronFinanceProcessor": {
        "src": "contracts\\IronFinanceProcessor.sol:8",
        "version": {
          "withMetadata": "75f57c6fca442921ffe5678ea73dc4574d2d73ee94325676594471e5ea9008b6",
          "withoutMetadata": "f6fac99992000fc78c056d09403f80940003fc41c56af514cd8b186ef083bf7d",
          "linkedWithoutMetadata": "f6fac99992000fc78c056d09403f80940003fc41c56af514cd8b186ef083bf7d"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "process(uint256,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "withdrawToken(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IronFinanceProcessor",
            "src": "contracts\\IronFinanceProcessor.sol:44"
          },
          {
            "kind": "state-variable-assignment",
            "name": "usdc",
            "src": "contracts\\IronFinanceProcessor.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "usdt",
            "src": "contracts\\IronFinanceProcessor.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "dai",
            "src": "contracts\\IronFinanceProcessor.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "curveExchange",
            "src": "contracts\\IronFinanceProcessor.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ironFinanceCoins",
            "src": "contracts\\IronFinanceProcessor.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ironFinanceIron",
            "src": "contracts\\IronFinanceProcessor.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ironIS3USD",
            "src": "contracts\\IronFinanceProcessor.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ironIS3USDLP",
            "src": "contracts\\IronFinanceProcessor.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "IronFinanceProcessor",
              "label": "lendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)332",
              "src": "contracts\\IronFinanceProcessor.sol:11"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdc",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:12"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdt",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:13"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "dai",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:14"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdcAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:16"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdtAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:17"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "lendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:19"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "curveExchange",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:21"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironFinanceCoins",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:23"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironFinanceIron",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:24"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironIS3USD",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:26"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironIS3USDLP",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:27"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdcCurrentAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:29"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdtCurrentAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:30"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdcExpectedAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:32"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdtExpectedAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:33"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "neededUsdcAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:35"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "neededUsdtAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:36"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "daiCurrentAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:38"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "IS3USDBalance",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:40"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironIS3USDLPBalance",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:41"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironIS3USDBalance",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:42"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)332": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "d086c775f970c88f6e0a41a710fd345eadd8581ce1f8d5f39bc3f5cc1d73a8e3",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "bc01fcc41ec1474c24846ba7ba608b4598682969853f5ecd4140755c75c672a7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "e983588107b4e9fc994dd64aa59bd77e1fafb03ec20d96b8faf93b7d3a80890b",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "9b119344481399677bda3778e3f8d36041d5e0be9c2dc8af9082a64afd4926f1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)332",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)696",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)332": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)696": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAaveWETHGateway": {
        "src": "contracts\\Interfaces.sol:745",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawETH(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAmToken": {
        "src": "contracts\\Interfaces.sol:738",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICamToken": {
        "src": "contracts\\Interfaces.sol:729",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "Token()",
          "leave(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICurve": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange_underlying(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIronSwap": {
        "src": "contracts\\Interfaces.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(uint256[],uint256,uint256)",
          "removeLiquidity(uint256,uint256[],uint256)",
          "removeLiquidityOneToken(uint256,uint8,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:178",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:132",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:574",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidatorV2": {
        "src": "contracts\\Interfaces.sol:584",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:594",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:688",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IronFinanceProcessor": {
        "src": "contracts\\IronFinanceProcessor.sol:8",
        "version": {
          "withMetadata": "40295ead4774501a4881a9fc6e772c2246346b3be3830f0b53ece9f3f85076b5",
          "withoutMetadata": "f6fac99992000fc78c056d09403f80940003fc41c56af514cd8b186ef083bf7d",
          "linkedWithoutMetadata": "f6fac99992000fc78c056d09403f80940003fc41c56af514cd8b186ef083bf7d"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "process(uint256,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "withdrawToken(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IronFinanceProcessor",
            "src": "contracts\\IronFinanceProcessor.sol:44"
          },
          {
            "kind": "state-variable-assignment",
            "name": "usdc",
            "src": "contracts\\IronFinanceProcessor.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "usdt",
            "src": "contracts\\IronFinanceProcessor.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "dai",
            "src": "contracts\\IronFinanceProcessor.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "curveExchange",
            "src": "contracts\\IronFinanceProcessor.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ironFinanceCoins",
            "src": "contracts\\IronFinanceProcessor.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ironFinanceIron",
            "src": "contracts\\IronFinanceProcessor.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ironIS3USD",
            "src": "contracts\\IronFinanceProcessor.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ironIS3USDLP",
            "src": "contracts\\IronFinanceProcessor.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "IronFinanceProcessor",
              "label": "lendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)332",
              "src": "contracts\\IronFinanceProcessor.sol:11"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdc",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:12"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdt",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:13"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "dai",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:14"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdcAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:16"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdtAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:17"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "lendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:19"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "curveExchange",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:21"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironFinanceCoins",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:23"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironFinanceIron",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:24"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironIS3USD",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:26"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironIS3USDLP",
              "type": "t_address",
              "src": "contracts\\IronFinanceProcessor.sol:27"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdcCurrentAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:29"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdtCurrentAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:30"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdcExpectedAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:32"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "usdtExpectedAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:33"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "neededUsdcAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:35"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "neededUsdtAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:36"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "daiCurrentAmount",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:38"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "IS3USDBalance",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:40"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironIS3USDLPBalance",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:41"
            },
            {
              "contract": "IronFinanceProcessor",
              "label": "ironIS3USDBalance",
              "type": "t_uint256",
              "src": "contracts\\IronFinanceProcessor.sol:42"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)332": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "d086c775f970c88f6e0a41a710fd345eadd8581ce1f8d5f39bc3f5cc1d73a8e3",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "bc01fcc41ec1474c24846ba7ba608b4598682969853f5ecd4140755c75c672a7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "e983588107b4e9fc994dd64aa59bd77e1fafb03ec20d96b8faf93b7d3a80890b",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "9b119344481399677bda3778e3f8d36041d5e0be9c2dc8af9082a64afd4926f1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "82995fd36e0cc25bfb0c4f78f0af6fcf2a5eea2b3e6214e7799238923aaf2e98",
          "withoutMetadata": "302b0748d7d9d751e411d53785ffebf5ec542e15dad7b3167f817cf07b431a45",
          "linkedWithoutMetadata": "302b0748d7d9d751e411d53785ffebf5ec542e15dad7b3167f817cf07b431a45"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MiMaticLiquidate.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)717",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)332",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1131",
              "src": "contracts\\MiMaticLiquidate.sol:14"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:15"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:16"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:18"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidate.sol:19"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:21"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:22"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:23"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:24"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)717": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)332": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1131": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateCamToken": {
        "src": "contracts\\MiMaticLiquidateCamToken.sol:10",
        "version": {
          "withMetadata": "ca3156bcd6ba93c0b9ee17e630a508a0852b536d94ea328905febf8720d94461",
          "withoutMetadata": "c91e41a0e28688d48ec4c169ac03d94912de06ee00d2e362364107702d655d0b",
          "linkedWithoutMetadata": "c91e41a0e28688d48ec4c169ac03d94912de06ee00d2e362364107702d655d0b"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256,address,address,address,address)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "rugPull()",
          "withdrawToken(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateCamToken",
            "src": "contracts\\MiMaticLiquidateCamToken.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)332",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:14"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1131",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:15"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:16"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:17"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:19"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:21"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:22"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:23"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:24"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:25"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "qiLiquidator",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:26"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:27"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:28"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camTokenShare",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:29"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amTokenBalance",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:30"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:32"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)332": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1131": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateCamWMatic": {
        "src": "contracts\\MiMaticLiquidateCamWMatic.sol:10",
        "version": {
          "withMetadata": "f7fb355618e58801a9c879524f7f8fd6443ad34f89403ec12b820c30cf4ab630",
          "withoutMetadata": "3e8975d6c57854becf538548a494663daedb1744f463ed1e9599f4f7ab08a108",
          "linkedWithoutMetadata": "3e8975d6c57854becf538548a494663daedb1744f463ed1e9599f4f7ab08a108"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "setCamToken(address)",
          "setAaveWETHGateway(address)",
          "executeFlashLoan(address,uint256,bytes)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateCamWMatic",
            "src": "contracts\\MiMaticLiquidateCamWMatic.sol:33"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MiMaticLiquidateCamWMatic.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidatorV2)740",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:14"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)332",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:15"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1131",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:16"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:17"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:18"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "camToken",
              "type": "t_contract(ICamToken)1149",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:20"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "amToken",
              "type": "t_contract(IAmToken)1166",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:21"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "aaveWETHGateway",
              "type": "t_contract(IAaveWETHGateway)1176",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:22"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:24"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:26"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:28"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:29"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:30"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:31"
            }
          ],
          "types": {
            "t_contract(IQiLiquidatorV2)740": {
              "label": "contract IQiLiquidatorV2"
            },
            "t_contract(ILendingPoolAddressesProvider)332": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1131": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_contract(ICamToken)1149": {
              "label": "contract ICamToken"
            },
            "t_contract(IAmToken)1166": {
              "label": "contract IAmToken"
            },
            "t_contract(IAaveWETHGateway)1176": {
              "label": "contract IAaveWETHGateway"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateToken": {
        "src": "contracts\\MiMaticLiquidateToken.sol:10",
        "version": {
          "withMetadata": "c32fe233b6c53e56905f4b231154632c63b4394310bacfa5a59d0442916bbe14",
          "withoutMetadata": "ef64ee00b45564cff058c57d0426fd46ea58020d4e65942b34eafa1f9c86d75f",
          "linkedWithoutMetadata": "ef64ee00b45564cff058c57d0426fd46ea58020d4e65942b34eafa1f9c86d75f"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256,bytes)",
          "liquidateVault(uint256,uint256,address,address)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateToken",
            "src": "contracts\\MiMaticLiquidateToken.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateToken",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)332",
              "src": "contracts\\MiMaticLiquidateToken.sol:14"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1131",
              "src": "contracts\\MiMaticLiquidateToken.sol:15"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateToken.sol:16"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateToken.sol:17"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateToken.sol:19"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateToken.sol:21"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateToken.sol:22"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateToken.sol:23"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateToken.sol:24"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "liquidatedToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateToken.sol:25"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "qiLiquidator",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateToken.sol:26"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateToken.sol:28"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)332": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1131": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPool": {
        "src": "contracts\\TestLendingPool.sol:6",
        "version": {
          "withMetadata": "f8ae41366b69a4374fb3ccf75c6089c9c2b61f18a4319e90670e03885f2448fc",
          "withoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce",
          "linkedWithoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPoolAddressesProvider": {
        "src": "contracts\\TestLendingPoolAddressesProvider.sol:15",
        "version": {
          "withMetadata": "6f5d01681b93ce24d4ecb0e781e052abce4e62da3b5ce45ae7eb004d8915ce63",
          "withoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa",
          "linkedWithoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa"
        },
        "inherit": [
          "ILendingPoolAddressesProvider",
          "Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getMarketId()",
          "setMarketId(string)",
          "setAddressAsProxy(bytes32,address)",
          "setAddress(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestLendingPoolAddressesProvider",
            "src": "contracts\\TestLendingPoolAddressesProvider.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_marketId",
              "type": "t_string_storage",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:16"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_addresses",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:17"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestQiLiquidator": {
        "src": "contracts\\TestQiLiquidator.sol:5",
        "version": {
          "withMetadata": "3f135ee7c6700ed0fc54e9b76c48b8388ecb2dd98f4370a757e95fa1dabc6b32",
          "withoutMetadata": "74fd0d1dfd9a6c873e958684e97409a43addefa340a991d614a7da0a1b5e10e5",
          "linkedWithoutMetadata": "74fd0d1dfd9a6c873e958684e97409a43addefa340a991d614a7da0a1b5e10e5"
        },
        "inherit": [
          "IQiLiquidator"
        ],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestUniswapV2Router02": {
        "src": "contracts\\TestUniswapV2Router02.sol:5",
        "version": {
          "withMetadata": "7a77b4db4efb9bc466d039dbb387cdfc2e71f5605db1f22c35331cd09586dd99",
          "withoutMetadata": "17198e4e0c495ab244833b58b7a006b59fa9771a56b69cc92c28f83e8b8fa0d2",
          "linkedWithoutMetadata": "17198e4e0c495ab244833b58b7a006b59fa9771a56b69cc92c28f83e8b8fa0d2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "WETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "18a03b8369e1029dfb474452b21de212aa2ba35a366c87ab4f51ab06428488bd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAaveWETHGateway": {
        "src": "contracts\\Interfaces.sol:715",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawETH(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAmToken": {
        "src": "contracts\\Interfaces.sol:708",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICamToken": {
        "src": "contracts\\Interfaces.sol:699",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "Token()",
          "leave(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidatorV2": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:564",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:658",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e1d8b6e2f5a630a3d06c743d1d14d860f079618f137fc284bdd34526e2944bb5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "7b09215404cfa8874868d3ec581971b9b6e5598deeedb4b8dc9aee720fa4f1c8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "9c202e1d1ec84bd34e58cb9ee2a41b1dd7bf4b57cd5e9f29124975c30c1ee0d0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "ba7cdc95c8a4b223e048125eb2f1aca29017c08fa931bca888e87d9b6926c268",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateCamToken": {
        "src": "contracts\\MiMaticLiquidateCamToken.sol:10",
        "version": {
          "withMetadata": "8ccbf24f80f12ffc5c294c5ea704ef3673beedee7e5931339d3ef75930bcc467",
          "withoutMetadata": "c91e41a0e28688d48ec4c169ac03d94912de06ee00d2e362364107702d655d0b",
          "linkedWithoutMetadata": "c91e41a0e28688d48ec4c169ac03d94912de06ee00d2e362364107702d655d0b"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256,address,address,address,address)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "rugPull()",
          "withdrawToken(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateCamToken",
            "src": "contracts\\MiMaticLiquidateCamToken.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:14"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1080",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:15"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:16"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:17"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:19"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:21"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:22"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:23"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:24"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:25"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "qiLiquidator",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:26"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:27"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:28"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camTokenShare",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:29"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amTokenBalance",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:30"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:32"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1080": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "18a03b8369e1029dfb474452b21de212aa2ba35a366c87ab4f51ab06428488bd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAaveWETHGateway": {
        "src": "contracts\\Interfaces.sol:715",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawETH(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAmToken": {
        "src": "contracts\\Interfaces.sol:708",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICamToken": {
        "src": "contracts\\Interfaces.sol:699",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "Token()",
          "leave(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidatorV2": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:564",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:658",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e1d8b6e2f5a630a3d06c743d1d14d860f079618f137fc284bdd34526e2944bb5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "7b09215404cfa8874868d3ec581971b9b6e5598deeedb4b8dc9aee720fa4f1c8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "9c202e1d1ec84bd34e58cb9ee2a41b1dd7bf4b57cd5e9f29124975c30c1ee0d0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "ba7cdc95c8a4b223e048125eb2f1aca29017c08fa931bca888e87d9b6926c268",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateCamToken": {
        "src": "contracts\\MiMaticLiquidateCamToken.sol:10",
        "version": {
          "withMetadata": "8eb7f9b9dfa5528c81ca6539d61d66ac6359ec45fe4a0cdb221664ef80143bb0",
          "withoutMetadata": "5a0b5812066d46094298c91735d196dfa86913960459d03a4afa5c8acf8b7707",
          "linkedWithoutMetadata": "5a0b5812066d46094298c91735d196dfa86913960459d03a4afa5c8acf8b7707"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256,address,address,address,address)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "rugPull()",
          "withdrawToken(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateCamToken",
            "src": "contracts\\MiMaticLiquidateCamToken.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:14"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1080",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:15"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:16"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:17"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:19"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:21"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:22"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:23"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:24"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:25"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "qiLiquidator",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:26"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:27"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:28"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camTokenShare",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:29"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amTokenBalance",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:30"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:34"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1080": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "18a03b8369e1029dfb474452b21de212aa2ba35a366c87ab4f51ab06428488bd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAaveWETHGateway": {
        "src": "contracts\\Interfaces.sol:715",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawETH(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAmToken": {
        "src": "contracts\\Interfaces.sol:708",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICamToken": {
        "src": "contracts\\Interfaces.sol:699",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "Token()",
          "leave(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidatorV2": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:564",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:658",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e1d8b6e2f5a630a3d06c743d1d14d860f079618f137fc284bdd34526e2944bb5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "7b09215404cfa8874868d3ec581971b9b6e5598deeedb4b8dc9aee720fa4f1c8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "9c202e1d1ec84bd34e58cb9ee2a41b1dd7bf4b57cd5e9f29124975c30c1ee0d0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "ba7cdc95c8a4b223e048125eb2f1aca29017c08fa931bca888e87d9b6926c268",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateCamToken": {
        "src": "contracts\\MiMaticLiquidateCamToken.sol:10",
        "version": {
          "withMetadata": "5eb1c6bf4bd30f6ba97e23f33a1b0c0d6e23de2ed3a797a620fc5a0e3540c3b8",
          "withoutMetadata": "8aad17f74b6965a5b73ee2fafe1b0b4c5b714d7049b4da38d79b3ca43d88564b",
          "linkedWithoutMetadata": "8aad17f74b6965a5b73ee2fafe1b0b4c5b714d7049b4da38d79b3ca43d88564b"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256,address,address,address,address)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "rugPull()",
          "withdrawToken(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateCamToken",
            "src": "contracts\\MiMaticLiquidateCamToken.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:14"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1080",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:15"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:16"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:17"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:19"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:21"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:22"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:23"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:24"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:25"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "qiLiquidator",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:26"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:27"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:28"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camTokenShare",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:29"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amTokenBalance",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:30"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:34"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1080": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "18a03b8369e1029dfb474452b21de212aa2ba35a366c87ab4f51ab06428488bd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAaveWETHGateway": {
        "src": "contracts\\Interfaces.sol:715",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawETH(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAmToken": {
        "src": "contracts\\Interfaces.sol:708",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICamToken": {
        "src": "contracts\\Interfaces.sol:699",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "Token()",
          "leave(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidatorV2": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:564",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:658",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e1d8b6e2f5a630a3d06c743d1d14d860f079618f137fc284bdd34526e2944bb5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "7b09215404cfa8874868d3ec581971b9b6e5598deeedb4b8dc9aee720fa4f1c8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "9c202e1d1ec84bd34e58cb9ee2a41b1dd7bf4b57cd5e9f29124975c30c1ee0d0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "ba7cdc95c8a4b223e048125eb2f1aca29017c08fa931bca888e87d9b6926c268",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateCamToken": {
        "src": "contracts\\MiMaticLiquidateCamToken.sol:10",
        "version": {
          "withMetadata": "e6ef959a7aaa4d4b76c8df65d72014de2d05d2016e2ec960b7cfdff3ea8de0b9",
          "withoutMetadata": "6755213649d05329fb006c094707558c18a7ede37dcd8dee59c107433ed52353",
          "linkedWithoutMetadata": "6755213649d05329fb006c094707558c18a7ede37dcd8dee59c107433ed52353"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256,address,address,address,address)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "rugPull()",
          "withdrawToken(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateCamToken",
            "src": "contracts\\MiMaticLiquidateCamToken.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:14"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1080",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:15"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:16"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:17"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:19"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:21"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:22"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:23"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:24"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:25"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "qiLiquidator",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:26"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:27"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:28"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camTokenShare",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:29"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amTokenBalance",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:30"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:34"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1080": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "18a03b8369e1029dfb474452b21de212aa2ba35a366c87ab4f51ab06428488bd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAaveWETHGateway": {
        "src": "contracts\\Interfaces.sol:715",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawETH(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAmToken": {
        "src": "contracts\\Interfaces.sol:708",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICamToken": {
        "src": "contracts\\Interfaces.sol:699",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "Token()",
          "leave(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidatorV2": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:564",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:658",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e1d8b6e2f5a630a3d06c743d1d14d860f079618f137fc284bdd34526e2944bb5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "7b09215404cfa8874868d3ec581971b9b6e5598deeedb4b8dc9aee720fa4f1c8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "9c202e1d1ec84bd34e58cb9ee2a41b1dd7bf4b57cd5e9f29124975c30c1ee0d0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "ba7cdc95c8a4b223e048125eb2f1aca29017c08fa931bca888e87d9b6926c268",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateCamToken": {
        "src": "contracts\\MiMaticLiquidateCamToken.sol:10",
        "version": {
          "withMetadata": "1528fb53443dc1ca1a296400d186d378b1ac83877b070bf2b438ab19c5029f1c",
          "withoutMetadata": "6755213649d05329fb006c094707558c18a7ede37dcd8dee59c107433ed52353",
          "linkedWithoutMetadata": "6755213649d05329fb006c094707558c18a7ede37dcd8dee59c107433ed52353"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256,address,address,address,address)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "rugPull()",
          "withdrawToken(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateCamToken",
            "src": "contracts\\MiMaticLiquidateCamToken.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:14"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1080",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:15"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:16"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:17"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:19"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:21"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:22"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:23"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:24"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:25"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "qiLiquidator",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:26"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:27"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:28"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camTokenShare",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:29"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amTokenBalance",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:30"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:34"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1080": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "18a03b8369e1029dfb474452b21de212aa2ba35a366c87ab4f51ab06428488bd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAaveWETHGateway": {
        "src": "contracts\\Interfaces.sol:715",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawETH(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAmToken": {
        "src": "contracts\\Interfaces.sol:708",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICamToken": {
        "src": "contracts\\Interfaces.sol:699",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "Token()",
          "leave(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidatorV2": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:564",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:658",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e1d8b6e2f5a630a3d06c743d1d14d860f079618f137fc284bdd34526e2944bb5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "7b09215404cfa8874868d3ec581971b9b6e5598deeedb4b8dc9aee720fa4f1c8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "9c202e1d1ec84bd34e58cb9ee2a41b1dd7bf4b57cd5e9f29124975c30c1ee0d0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "ba7cdc95c8a4b223e048125eb2f1aca29017c08fa931bca888e87d9b6926c268",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateCamToken": {
        "src": "contracts\\MiMaticLiquidateCamToken.sol:10",
        "version": {
          "withMetadata": "1561ab5823115de58b31e929c821d9e2cdfdd48d5b2d307e9ea22df7e13ac426",
          "withoutMetadata": "c66c72db428d7a3c42e067a6fe1784dd7cf2db1c799834bb5e4103fc71034f99",
          "linkedWithoutMetadata": "c66c72db428d7a3c42e067a6fe1784dd7cf2db1c799834bb5e4103fc71034f99"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256,address,address,address,address)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "rugPull()",
          "withdrawToken(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateCamToken",
            "src": "contracts\\MiMaticLiquidateCamToken.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:14"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1080",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:15"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:16"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:17"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:19"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:21"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:22"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:23"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:24"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:25"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "qiLiquidator",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:26"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:27"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:28"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camTokenShare",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:29"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amTokenBalance",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:30"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:34"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1080": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "18a03b8369e1029dfb474452b21de212aa2ba35a366c87ab4f51ab06428488bd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAaveWETHGateway": {
        "src": "contracts\\Interfaces.sol:715",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawETH(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAmToken": {
        "src": "contracts\\Interfaces.sol:708",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICamToken": {
        "src": "contracts\\Interfaces.sol:699",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "Token()",
          "leave(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidatorV2": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:564",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:658",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e1d8b6e2f5a630a3d06c743d1d14d860f079618f137fc284bdd34526e2944bb5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "7b09215404cfa8874868d3ec581971b9b6e5598deeedb4b8dc9aee720fa4f1c8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "9c202e1d1ec84bd34e58cb9ee2a41b1dd7bf4b57cd5e9f29124975c30c1ee0d0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "ba7cdc95c8a4b223e048125eb2f1aca29017c08fa931bca888e87d9b6926c268",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateCamToken": {
        "src": "contracts\\MiMaticLiquidateCamToken.sol:10",
        "version": {
          "withMetadata": "05613db5fbf23b1b64e067fff73b95bd74b0b248f4752cebf406f64c1bae160b",
          "withoutMetadata": "b4fc1cb8cf3f409eecbe41117ca79575c2716a1d64a93f88c105ac2e30fe6c05",
          "linkedWithoutMetadata": "b4fc1cb8cf3f409eecbe41117ca79575c2716a1d64a93f88c105ac2e30fe6c05"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256,address,address,address,address)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateCamToken",
            "src": "contracts\\MiMaticLiquidateCamToken.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:14"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1080",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:15"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:16"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:17"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:19"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:21"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:22"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:23"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:24"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "liquidatedToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:25"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "qiLiquidator",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:26"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:27"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:28"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "camTokenShare",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:29"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amTokenBalance",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:30"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "amountOwing",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:31"
            },
            {
              "contract": "MiMaticLiquidateCamToken",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateCamToken.sol:33"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1080": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "18a03b8369e1029dfb474452b21de212aa2ba35a366c87ab4f51ab06428488bd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAaveWETHGateway": {
        "src": "contracts\\Interfaces.sol:715",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawETH(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAmToken": {
        "src": "contracts\\Interfaces.sol:708",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICamToken": {
        "src": "contracts\\Interfaces.sol:699",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "Token()",
          "leave(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidatorV2": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:564",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:658",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e1d8b6e2f5a630a3d06c743d1d14d860f079618f137fc284bdd34526e2944bb5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "7b09215404cfa8874868d3ec581971b9b6e5598deeedb4b8dc9aee720fa4f1c8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "9c202e1d1ec84bd34e58cb9ee2a41b1dd7bf4b57cd5e9f29124975c30c1ee0d0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "ba7cdc95c8a4b223e048125eb2f1aca29017c08fa931bca888e87d9b6926c268",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "e68b65ca577202af650eff37a0688ec8ec7cec0deaf8cc31d96ffa0bfa6d0c12",
          "withoutMetadata": "302b0748d7d9d751e411d53785ffebf5ec542e15dad7b3167f817cf07b431a45",
          "linkedWithoutMetadata": "302b0748d7d9d751e411d53785ffebf5ec542e15dad7b3167f817cf07b431a45"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MiMaticLiquidate.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1080",
              "src": "contracts\\MiMaticLiquidate.sol:14"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:15"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:16"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:18"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidate.sol:19"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:21"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:22"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:23"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:24"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1080": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateCamWMatic": {
        "src": "contracts\\MiMaticLiquidateCamWMatic.sol:10",
        "version": {
          "withMetadata": "ab7d249679ec8ba600fb568ce2b6b6299bb997c65f967f9840a7d2e1f05a5885",
          "withoutMetadata": "3e8975d6c57854becf538548a494663daedb1744f463ed1e9599f4f7ab08a108",
          "linkedWithoutMetadata": "3e8975d6c57854becf538548a494663daedb1744f463ed1e9599f4f7ab08a108"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "setCamToken(address)",
          "setAaveWETHGateway(address)",
          "executeFlashLoan(address,uint256,bytes)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateCamWMatic",
            "src": "contracts\\MiMaticLiquidateCamWMatic.sol:33"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MiMaticLiquidateCamWMatic.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidatorV2)689",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:14"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:15"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1080",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:16"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:17"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:18"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "camToken",
              "type": "t_contract(ICamToken)1098",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:20"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "amToken",
              "type": "t_contract(IAmToken)1115",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:21"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "aaveWETHGateway",
              "type": "t_contract(IAaveWETHGateway)1125",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:22"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:24"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:26"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:28"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:29"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:30"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:31"
            }
          ],
          "types": {
            "t_contract(IQiLiquidatorV2)689": {
              "label": "contract IQiLiquidatorV2"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1080": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_contract(ICamToken)1098": {
              "label": "contract ICamToken"
            },
            "t_contract(IAmToken)1115": {
              "label": "contract IAmToken"
            },
            "t_contract(IAaveWETHGateway)1125": {
              "label": "contract IAaveWETHGateway"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateToken": {
        "src": "contracts\\MiMaticLiquidateToken.sol:10",
        "version": {
          "withMetadata": "c25b997733d3395ed2ad0a7726e7c48f9a1ae6db84fe7846d80ef496f1d4fbe7",
          "withoutMetadata": "ef64ee00b45564cff058c57d0426fd46ea58020d4e65942b34eafa1f9c86d75f",
          "linkedWithoutMetadata": "ef64ee00b45564cff058c57d0426fd46ea58020d4e65942b34eafa1f9c86d75f"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256,bytes)",
          "liquidateVault(uint256,uint256,address,address)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateToken",
            "src": "contracts\\MiMaticLiquidateToken.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateToken",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidateToken.sol:14"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1080",
              "src": "contracts\\MiMaticLiquidateToken.sol:15"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateToken.sol:16"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateToken.sol:17"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateToken.sol:19"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateToken.sol:21"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateToken.sol:22"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateToken.sol:23"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateToken.sol:24"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "liquidatedToken",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateToken.sol:25"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "qiLiquidator",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateToken.sol:26"
            },
            {
              "contract": "MiMaticLiquidateToken",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateToken.sol:28"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1080": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPool": {
        "src": "contracts\\TestLendingPool.sol:6",
        "version": {
          "withMetadata": "956e1ab4c531480923f53a80bcf8f7b44e41d6d56f5dd5597fb5f38c40f9fc39",
          "withoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce",
          "linkedWithoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPoolAddressesProvider": {
        "src": "contracts\\TestLendingPoolAddressesProvider.sol:15",
        "version": {
          "withMetadata": "aa62ecacb94671d9dde8ff9a227ce7616afe83df287e8ba8a81218438f359672",
          "withoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa",
          "linkedWithoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa"
        },
        "inherit": [
          "ILendingPoolAddressesProvider",
          "Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getMarketId()",
          "setMarketId(string)",
          "setAddressAsProxy(bytes32,address)",
          "setAddress(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestLendingPoolAddressesProvider",
            "src": "contracts\\TestLendingPoolAddressesProvider.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_marketId",
              "type": "t_string_storage",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:16"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_addresses",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:17"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestQiLiquidator": {
        "src": "contracts\\TestQiLiquidator.sol:5",
        "version": {
          "withMetadata": "52505d9dc51b3322a04eec28f51c62e3f3096a8129dccffd342f1246dcd3ebf5",
          "withoutMetadata": "74fd0d1dfd9a6c873e958684e97409a43addefa340a991d614a7da0a1b5e10e5",
          "linkedWithoutMetadata": "74fd0d1dfd9a6c873e958684e97409a43addefa340a991d614a7da0a1b5e10e5"
        },
        "inherit": [
          "IQiLiquidator"
        ],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestUniswapV2Router02": {
        "src": "contracts\\TestUniswapV2Router02.sol:5",
        "version": {
          "withMetadata": "100d15d115bfbfec54a2612f7edb0f9e2156901f7d08b76ac61becf9b6242def",
          "withoutMetadata": "17198e4e0c495ab244833b58b7a006b59fa9771a56b69cc92c28f83e8b8fa0d2",
          "linkedWithoutMetadata": "17198e4e0c495ab244833b58b7a006b59fa9771a56b69cc92c28f83e8b8fa0d2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "WETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "18a03b8369e1029dfb474452b21de212aa2ba35a366c87ab4f51ab06428488bd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAaveWETHGateway": {
        "src": "contracts\\Interfaces.sol:705",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawETH(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAmToken": {
        "src": "contracts\\Interfaces.sol:698",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICamToken": {
        "src": "contracts\\Interfaces.sol:689",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "Token()",
          "leave(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "5313fc62762418b2eb685e77fd621ac61b7f4abc06c3a883f631f572ef098bae",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "eadbdc54b2c5a8e6cf913ee1fd2164d76e3f4b88e755b0a0d0312136fcac89e1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "6196aa73e807de9bd3c6a430a31d772faa2697a436dea705d124f2aef107fd01",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "f44c3239819b9291cb7d6aec17ac7638e5fd033d9d7a4c2251bbb25b1fbb7827",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "3752b13024fbcb57127780532ed3c6c13676d7c9b3f7c82797e09d58cef7048f",
          "withoutMetadata": "302b0748d7d9d751e411d53785ffebf5ec542e15dad7b3167f817cf07b431a45",
          "linkedWithoutMetadata": "302b0748d7d9d751e411d53785ffebf5ec542e15dad7b3167f817cf07b431a45"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MiMaticLiquidate.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1057",
              "src": "contracts\\MiMaticLiquidate.sol:14"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:15"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:16"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:18"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidate.sol:19"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:21"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:22"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:23"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:24"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1057": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateCamWMatic": {
        "src": "contracts\\MiMaticLiquidateCamWMatic.sol:10",
        "version": {
          "withMetadata": "c4c1f8b001490f07a9693b9a2434a80bb167f71d41228af2b9891e9603e02c4d",
          "withoutMetadata": "f04e953a5be712ee605dc4cf5b8777fc401b1207982cd13521c8c269d54e2bf3",
          "linkedWithoutMetadata": "f04e953a5be712ee605dc4cf5b8777fc401b1207982cd13521c8c269d54e2bf3"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "setCamToken(address)",
          "setAaveWETHGateway(address)",
          "executeFlashLoan(address,uint256,bytes)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateCamWMatic",
            "src": "contracts\\MiMaticLiquidateCamWMatic.sol:33"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MiMaticLiquidateCamWMatic.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:14"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:15"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1057",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:16"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:17"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:18"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "camToken",
              "type": "t_contract(ICamToken)1075",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:20"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "amToken",
              "type": "t_contract(IAmToken)1092",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:21"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "aaveWETHGateway",
              "type": "t_contract(IAaveWETHGateway)1102",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:22"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:24"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:26"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:28"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:29"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:30"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:31"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1057": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_contract(ICamToken)1075": {
              "label": "contract ICamToken"
            },
            "t_contract(IAmToken)1092": {
              "label": "contract IAmToken"
            },
            "t_contract(IAaveWETHGateway)1102": {
              "label": "contract IAaveWETHGateway"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPool": {
        "src": "contracts\\TestLendingPool.sol:6",
        "version": {
          "withMetadata": "473a267a7c7bd2338259edf80d1e868c5077104304b5d3932669c1a44af4ae5e",
          "withoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce",
          "linkedWithoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPoolAddressesProvider": {
        "src": "contracts\\TestLendingPoolAddressesProvider.sol:15",
        "version": {
          "withMetadata": "1c06b35ff39de588b938f60d366f198c0f37d507c389a6eaaf9b290edb33a70c",
          "withoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa",
          "linkedWithoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa"
        },
        "inherit": [
          "ILendingPoolAddressesProvider",
          "Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getMarketId()",
          "setMarketId(string)",
          "setAddressAsProxy(bytes32,address)",
          "setAddress(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestLendingPoolAddressesProvider",
            "src": "contracts\\TestLendingPoolAddressesProvider.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_marketId",
              "type": "t_string_storage",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:16"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_addresses",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:17"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestQiLiquidator": {
        "src": "contracts\\TestQiLiquidator.sol:5",
        "version": {
          "withMetadata": "cb5214e7d6c19b42ecbfbbd819e46689121ed98d44a76e321b09fe27d1bf4770",
          "withoutMetadata": "74fd0d1dfd9a6c873e958684e97409a43addefa340a991d614a7da0a1b5e10e5",
          "linkedWithoutMetadata": "74fd0d1dfd9a6c873e958684e97409a43addefa340a991d614a7da0a1b5e10e5"
        },
        "inherit": [
          "IQiLiquidator"
        ],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestUniswapV2Router02": {
        "src": "contracts\\TestUniswapV2Router02.sol:5",
        "version": {
          "withMetadata": "7c65b99a08c28bbaa21a51f70da1072313151130e2732ca7185ece10eeec74a5",
          "withoutMetadata": "17198e4e0c495ab244833b58b7a006b59fa9771a56b69cc92c28f83e8b8fa0d2",
          "linkedWithoutMetadata": "17198e4e0c495ab244833b58b7a006b59fa9771a56b69cc92c28f83e8b8fa0d2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "WETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "18a03b8369e1029dfb474452b21de212aa2ba35a366c87ab4f51ab06428488bd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidateCamWMatic": {
        "src": "contracts\\MiMaticLiquidateCamWMatic.sol:10",
        "version": {
          "withMetadata": "7dc1884ce19d89cb9a93637bca8f0b0574b7b3557db2c24666d2e6d11fc6bf48",
          "withoutMetadata": "cfdbe5a00bc3f34ad82bdb22ce4553c07a0e886dd2614225729739fe79cd47f1",
          "linkedWithoutMetadata": "cfdbe5a00bc3f34ad82bdb22ce4553c07a0e886dd2614225729739fe79cd47f1"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256,bytes)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidateCamWMatic",
            "src": "contracts\\MiMaticLiquidateCamWMatic.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MiMaticLiquidateCamWMatic.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:14"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:15"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1057",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:16"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:17"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:18"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:20"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:21"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:23"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:24"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:25"
            },
            {
              "contract": "MiMaticLiquidateCamWMatic",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidateCamWMatic.sol:26"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1057": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "18a03b8369e1029dfb474452b21de212aa2ba35a366c87ab4f51ab06428488bd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MultiMiMaticLiquidate": {
        "src": "contracts\\MultiMiMaticLiquidate.sol:10",
        "version": {
          "withMetadata": "c6093acba278bbb9c621a8ffe75a723668eca592a46d740c5f3311aa85659eca",
          "withoutMetadata": "26b168526b488d7091ac22a67a82996df539956bdfe67d975a58cdc9e3bc759a",
          "linkedWithoutMetadata": "26b168526b488d7091ac22a67a82996df539956bdfe67d975a58cdc9e3bc759a"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256,bytes)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MultiMiMaticLiquidate",
            "src": "contracts\\MultiMiMaticLiquidate.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MultiMiMaticLiquidate.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MultiMiMaticLiquidate.sol:14"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MultiMiMaticLiquidate.sol:15"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1057",
              "src": "contracts\\MultiMiMaticLiquidate.sol:16"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:17"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:18"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MultiMiMaticLiquidate.sol:20"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MultiMiMaticLiquidate.sol:21"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:23"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:24"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:25"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:26"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1057": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "18a03b8369e1029dfb474452b21de212aa2ba35a366c87ab4f51ab06428488bd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MultiMiMaticLiquidate": {
        "src": "contracts\\MultiMiMaticLiquidate.sol:10",
        "version": {
          "withMetadata": "f58e0d0507cd4c64553da5678228af236f8ac8262957a4bcd0691fa3f0c340e0",
          "withoutMetadata": "803cb4f0684ef6e7a53f6ffdc26c3b6bf28013bb879a33adf22529805cdb09d1",
          "linkedWithoutMetadata": "803cb4f0684ef6e7a53f6ffdc26c3b6bf28013bb879a33adf22529805cdb09d1"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256,bytes)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MultiMiMaticLiquidate",
            "src": "contracts\\MultiMiMaticLiquidate.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MultiMiMaticLiquidate.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MultiMiMaticLiquidate.sol:14"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MultiMiMaticLiquidate.sol:15"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1057",
              "src": "contracts\\MultiMiMaticLiquidate.sol:16"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:17"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:18"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MultiMiMaticLiquidate.sol:20"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MultiMiMaticLiquidate.sol:21"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:23"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:24"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:25"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:26"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1057": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "18a03b8369e1029dfb474452b21de212aa2ba35a366c87ab4f51ab06428488bd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestUniswapV2Router02": {
        "src": "contracts\\TestUniswapV2Router02.sol:5",
        "version": {
          "withMetadata": "baba727f4e6043581ae9ff67edf7e8a1489581f61eef06a45b5df5fdeb0c16e3",
          "withoutMetadata": "17198e4e0c495ab244833b58b7a006b59fa9771a56b69cc92c28f83e8b8fa0d2",
          "linkedWithoutMetadata": "17198e4e0c495ab244833b58b7a006b59fa9771a56b69cc92c28f83e8b8fa0d2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "WETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MultiMiMaticLiquidate": {
        "src": "contracts\\MultiMiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "1899f5dd27bc3c80d6d7711cb62dcab60fea5d493bf6d247d830d1b6d6a79984",
          "withoutMetadata": "cfdbe5a00bc3f34ad82bdb22ce4553c07a0e886dd2614225729739fe79cd47f1",
          "linkedWithoutMetadata": "cfdbe5a00bc3f34ad82bdb22ce4553c07a0e886dd2614225729739fe79cd47f1"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256,bytes)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MultiMiMaticLiquidate",
            "src": "contracts\\MultiMiMaticLiquidate.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MultiMiMaticLiquidate.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MultiMiMaticLiquidate.sol:12"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MultiMiMaticLiquidate.sol:13"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1057",
              "src": "contracts\\MultiMiMaticLiquidate.sol:14"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:15"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:16"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MultiMiMaticLiquidate.sol:18"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MultiMiMaticLiquidate.sol:19"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:21"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:22"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:23"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:24"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1057": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MultiMiMaticLiquidate": {
        "src": "contracts\\MultiMiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "94a9cbda978d4506e7ec1ff1a702c63d9bcda058a20ea5307180bb0d782d8b99",
          "withoutMetadata": "66d4013cbd30bd0adb38f70f47dff7dd4e1b30ed89f2ef5ebf60c596ffbe0d13",
          "linkedWithoutMetadata": "66d4013cbd30bd0adb38f70f47dff7dd4e1b30ed89f2ef5ebf60c596ffbe0d13"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256,bytes)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MultiMiMaticLiquidate",
            "src": "contracts\\MultiMiMaticLiquidate.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MultiMiMaticLiquidate.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MultiMiMaticLiquidate.sol:12"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MultiMiMaticLiquidate.sol:13"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1057",
              "src": "contracts\\MultiMiMaticLiquidate.sol:14"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:15"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:16"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MultiMiMaticLiquidate.sol:18"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MultiMiMaticLiquidate.sol:19"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:21"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:22"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:23"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:24"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1057": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MultiMiMaticLiquidate": {
        "src": "contracts\\MultiMiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "ceb1affed6239a5760b37e052f05294f62c0e36d4f8076b4c9a6531cf4b94530",
          "withoutMetadata": "3fa9b8f6dd06790a1d7b11720d9b463a5ff2175d2c01d0c3a6ba72b5bc4f7577",
          "linkedWithoutMetadata": "3fa9b8f6dd06790a1d7b11720d9b463a5ff2175d2c01d0c3a6ba72b5bc4f7577"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256,bytes)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MultiMiMaticLiquidate",
            "src": "contracts\\MultiMiMaticLiquidate.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MultiMiMaticLiquidate.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MultiMiMaticLiquidate.sol:12"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MultiMiMaticLiquidate.sol:13"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1057",
              "src": "contracts\\MultiMiMaticLiquidate.sol:14"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:15"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:16"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MultiMiMaticLiquidate.sol:18"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MultiMiMaticLiquidate.sol:19"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:21"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:22"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:23"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:24"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1057": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MultiMiMaticLiquidate": {
        "src": "contracts\\MultiMiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "a20f16b595849b9c90e54193620453a70595f2eb009f1a4916d312f458fb254e",
          "withoutMetadata": "e2df5f1ef48d47c2b55426d38d4008acdcb189ad4451ff9951f0cc752c6bc6cd",
          "linkedWithoutMetadata": "e2df5f1ef48d47c2b55426d38d4008acdcb189ad4451ff9951f0cc752c6bc6cd"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256,bytes)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MultiMiMaticLiquidate",
            "src": "contracts\\MultiMiMaticLiquidate.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MultiMiMaticLiquidate.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MultiMiMaticLiquidate.sol:12"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MultiMiMaticLiquidate.sol:13"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1057",
              "src": "contracts\\MultiMiMaticLiquidate.sol:14"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:15"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:16"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MultiMiMaticLiquidate.sol:18"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MultiMiMaticLiquidate.sol:19"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:21"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:22"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:23"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:24"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1057": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestUniswapV2Router02": {
        "src": "contracts\\TestUniswapV2Router02.sol:5",
        "version": {
          "withMetadata": "2038532f1e0a095b80a01b54609bfeea14030936dc9851c0523b463c192d34f9",
          "withoutMetadata": "ae7c40bd7195759bf909b2948e66a6ae15600558f7beb4abbd2a18c9a6419e1e",
          "linkedWithoutMetadata": "ae7c40bd7195759bf909b2948e66a6ae15600558f7beb4abbd2a18c9a6419e1e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactETHForTokens(uint256,address[],address,int256)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "WETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestUniswapV2Router02": {
        "src": "contracts\\TestUniswapV2Router02.sol:5",
        "version": {
          "withMetadata": "6e042371a1183c5836f6793f891cef27c5c96cb75d8676a19df30c9d38d7c2a2",
          "withoutMetadata": "ae7c40bd7195759bf909b2948e66a6ae15600558f7beb4abbd2a18c9a6419e1e",
          "linkedWithoutMetadata": "ae7c40bd7195759bf909b2948e66a6ae15600558f7beb4abbd2a18c9a6419e1e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactETHForTokens(uint256,address[],address,int256)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "WETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "dd01021d28388df99dd12793f28e3cb03b4dff2f6775636bfbd64fa00eb09af6",
          "withoutMetadata": "302b0748d7d9d751e411d53785ffebf5ec542e15dad7b3167f817cf07b431a45",
          "linkedWithoutMetadata": "302b0748d7d9d751e411d53785ffebf5ec542e15dad7b3167f817cf07b431a45"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MiMaticLiquidate.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1057",
              "src": "contracts\\MiMaticLiquidate.sol:14"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:15"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:16"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:18"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidate.sol:19"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:21"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:22"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:23"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:24"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1057": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MultiMiMaticLiquidate": {
        "src": "contracts\\MultiMiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "1899f5dd27bc3c80d6d7711cb62dcab60fea5d493bf6d247d830d1b6d6a79984",
          "withoutMetadata": "cfdbe5a00bc3f34ad82bdb22ce4553c07a0e886dd2614225729739fe79cd47f1",
          "linkedWithoutMetadata": "cfdbe5a00bc3f34ad82bdb22ce4553c07a0e886dd2614225729739fe79cd47f1"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256,bytes)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MultiMiMaticLiquidate",
            "src": "contracts\\MultiMiMaticLiquidate.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MultiMiMaticLiquidate.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MultiMiMaticLiquidate.sol:12"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MultiMiMaticLiquidate.sol:13"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1057",
              "src": "contracts\\MultiMiMaticLiquidate.sol:14"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:15"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:16"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MultiMiMaticLiquidate.sol:18"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MultiMiMaticLiquidate.sol:19"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:21"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:22"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:23"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:24"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1057": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPool": {
        "src": "contracts\\TestLendingPool.sol:6",
        "version": {
          "withMetadata": "4e22d65e1b25cbe30048900ecf8b1c260dee2dca15df004cb3917beac18638d3",
          "withoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce",
          "linkedWithoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPoolAddressesProvider": {
        "src": "contracts\\TestLendingPoolAddressesProvider.sol:15",
        "version": {
          "withMetadata": "2611fe71a7cd41a270ba32a73173529f85e357131ccd1a9cb1fc9f31e3842743",
          "withoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa",
          "linkedWithoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa"
        },
        "inherit": [
          "ILendingPoolAddressesProvider",
          "Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getMarketId()",
          "setMarketId(string)",
          "setAddressAsProxy(bytes32,address)",
          "setAddress(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestLendingPoolAddressesProvider",
            "src": "contracts\\TestLendingPoolAddressesProvider.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_marketId",
              "type": "t_string_storage",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:16"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_addresses",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:17"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestQiLiquidator": {
        "src": "contracts\\TestQiLiquidator.sol:5",
        "version": {
          "withMetadata": "738453f7a4b41b965426fd647196a910814fc5decb6e9cee175621c8e48a64f6",
          "withoutMetadata": "74fd0d1dfd9a6c873e958684e97409a43addefa340a991d614a7da0a1b5e10e5",
          "linkedWithoutMetadata": "74fd0d1dfd9a6c873e958684e97409a43addefa340a991d614a7da0a1b5e10e5"
        },
        "inherit": [
          "IQiLiquidator"
        ],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestUniswapV2Router02": {
        "src": "contracts\\TestUniswapV2Router02.sol:5",
        "version": {
          "withMetadata": "491683330a16650a16d7e886080877c9ec47303debc0db7267fa621b1070e8a8",
          "withoutMetadata": "d70210996a9448b1e5d24af81a5de3bdbc848eb9be977c50cee321220425dfdf",
          "linkedWithoutMetadata": "d70210996a9448b1e5d24af81a5de3bdbc848eb9be977c50cee321220425dfdf"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactETHForTokens(uint256,address[],address,int256)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "WETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapRouterSimplified": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "WETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:569",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:663",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "f11ae8a3dad99d58cf453b941799d49fb4b53e16ec3b3de98d41af32a9731bfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "e6ae5c5445b929b1d166024f50811ebfbbc075b68a12efe5c93aae1ab37b9018",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "749b853ceefa273fdce21532a1a6678828db386cd3a550d5312a240d67cebd79",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "23480b0941a8c74787b164b6030652a00e794cd6403c4fb80f91c4f96026d879",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "2932f0957c23a8261746a3fc37a0521e229801ece1c52f1774ac943411d1a866",
          "withoutMetadata": "302b0748d7d9d751e411d53785ffebf5ec542e15dad7b3167f817cf07b431a45",
          "linkedWithoutMetadata": "302b0748d7d9d751e411d53785ffebf5ec542e15dad7b3167f817cf07b431a45"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MiMaticLiquidate.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1095",
              "src": "contracts\\MiMaticLiquidate.sol:14"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:15"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:16"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:18"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidate.sol:19"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:21"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:22"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:23"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:24"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1095": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MultiMiMaticLiquidate": {
        "src": "contracts\\MultiMiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "8bff3c1125007be2a44c7e78da3efb75a9c79ae4edfd48ccaadbbbe98a97e4a5",
          "withoutMetadata": "cfdbe5a00bc3f34ad82bdb22ce4553c07a0e886dd2614225729739fe79cd47f1",
          "linkedWithoutMetadata": "cfdbe5a00bc3f34ad82bdb22ce4553c07a0e886dd2614225729739fe79cd47f1"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256,bytes)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MultiMiMaticLiquidate",
            "src": "contracts\\MultiMiMaticLiquidate.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MultiMiMaticLiquidate.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MultiMiMaticLiquidate.sol:12"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MultiMiMaticLiquidate.sol:13"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapRouterSimplified)704",
              "src": "contracts\\MultiMiMaticLiquidate.sol:14"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:15"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:16"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MultiMiMaticLiquidate.sol:18"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MultiMiMaticLiquidate.sol:19"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:21"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:22"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:23"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:24"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapRouterSimplified)704": {
              "label": "contract IUniswapRouterSimplified"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPool": {
        "src": "contracts\\TestLendingPool.sol:6",
        "version": {
          "withMetadata": "3728af4c94ebbe4decd980bc16043adaaee8a824306494423267e3c177c01084",
          "withoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce",
          "linkedWithoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPoolAddressesProvider": {
        "src": "contracts\\TestLendingPoolAddressesProvider.sol:15",
        "version": {
          "withMetadata": "e7525a8bec91eb64c8b3ffa58f7a0c223eba2cf46e18179bd93d6b43d9746f79",
          "withoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa",
          "linkedWithoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa"
        },
        "inherit": [
          "ILendingPoolAddressesProvider",
          "Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getMarketId()",
          "setMarketId(string)",
          "setAddressAsProxy(bytes32,address)",
          "setAddress(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestLendingPoolAddressesProvider",
            "src": "contracts\\TestLendingPoolAddressesProvider.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_marketId",
              "type": "t_string_storage",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:16"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_addresses",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:17"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestQiLiquidator": {
        "src": "contracts\\TestQiLiquidator.sol:5",
        "version": {
          "withMetadata": "04af43f7c4f72128654f13e8a632e1298df578ff1a2480174244f824769990af",
          "withoutMetadata": "74fd0d1dfd9a6c873e958684e97409a43addefa340a991d614a7da0a1b5e10e5",
          "linkedWithoutMetadata": "74fd0d1dfd9a6c873e958684e97409a43addefa340a991d614a7da0a1b5e10e5"
        },
        "inherit": [
          "IQiLiquidator"
        ],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestUniswapV2Router02": {
        "src": "contracts\\TestUniswapV2Router02.sol:5",
        "version": {
          "withMetadata": "4aa3de7e6b2485e8dac551bcc2a510af209d93519a51946dfcf0fabc37ccfdb2",
          "withoutMetadata": "d70210996a9448b1e5d24af81a5de3bdbc848eb9be977c50cee321220425dfdf",
          "linkedWithoutMetadata": "d70210996a9448b1e5d24af81a5de3bdbc848eb9be977c50cee321220425dfdf"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactETHForTokens(uint256,address[],address,int256)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "WETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestUniswapV2Router02": {
        "src": "contracts\\TestUniswapV2Router02.sol:5",
        "version": {
          "withMetadata": "dc14dcde4e7aef6beae8256c905bf6e8530589f38597b2572032ff3bcf44c93f",
          "withoutMetadata": "5f65d548e37ad7636437437ea2d82870213c7e805a5bb957e6169e09add61339",
          "linkedWithoutMetadata": "5f65d548e37ad7636437437ea2d82870213c7e805a5bb957e6169e09add61339"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactETHForTokens(uint256,address[],address,int256)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestQiLiquidator": {
        "src": "contracts\\TestQiLiquidator.sol:5",
        "version": {
          "withMetadata": "738453f7a4b41b965426fd647196a910814fc5decb6e9cee175621c8e48a64f6",
          "withoutMetadata": "74fd0d1dfd9a6c873e958684e97409a43addefa340a991d614a7da0a1b5e10e5",
          "linkedWithoutMetadata": "74fd0d1dfd9a6c873e958684e97409a43addefa340a991d614a7da0a1b5e10e5"
        },
        "inherit": [
          "IQiLiquidator"
        ],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestUniswapV2Router02": {
        "src": "contracts\\TestUniswapV2Router02.sol:5",
        "version": {
          "withMetadata": "2a7d2895fd8958add696ea9beee804770df9d1920762a513fe04b87fc623629e",
          "withoutMetadata": "35c8b914acfac866702c41699e4e863dbc29b895160181d9a108377f2217754b",
          "linkedWithoutMetadata": "35c8b914acfac866702c41699e4e863dbc29b895160181d9a108377f2217754b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactETHForTokens(uint256,address[],address,int256)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MultiMiMaticLiquidate": {
        "src": "contracts\\MultiMiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "1899f5dd27bc3c80d6d7711cb62dcab60fea5d493bf6d247d830d1b6d6a79984",
          "withoutMetadata": "cfdbe5a00bc3f34ad82bdb22ce4553c07a0e886dd2614225729739fe79cd47f1",
          "linkedWithoutMetadata": "cfdbe5a00bc3f34ad82bdb22ce4553c07a0e886dd2614225729739fe79cd47f1"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256,bytes)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MultiMiMaticLiquidate",
            "src": "contracts\\MultiMiMaticLiquidate.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MultiMiMaticLiquidate.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MultiMiMaticLiquidate.sol:12"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MultiMiMaticLiquidate.sol:13"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1057",
              "src": "contracts\\MultiMiMaticLiquidate.sol:14"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:15"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:16"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MultiMiMaticLiquidate.sol:18"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MultiMiMaticLiquidate.sol:19"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:21"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:22"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:23"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:24"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1057": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MultiMiMaticLiquidate": {
        "src": "contracts\\MultiMiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "fe11885e185a775be145f35c0e38660a4a6aefcb9297e08555d6a9c2579363c6",
          "withoutMetadata": "302b0748d7d9d751e411d53785ffebf5ec542e15dad7b3167f817cf07b431a45",
          "linkedWithoutMetadata": "302b0748d7d9d751e411d53785ffebf5ec542e15dad7b3167f817cf07b431a45"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MultiMiMaticLiquidate",
            "src": "contracts\\MultiMiMaticLiquidate.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MultiMiMaticLiquidate.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MultiMiMaticLiquidate.sol:12"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MultiMiMaticLiquidate.sol:13"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1057",
              "src": "contracts\\MultiMiMaticLiquidate.sol:14"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:15"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MultiMiMaticLiquidate.sol:16"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MultiMiMaticLiquidate.sol:18"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MultiMiMaticLiquidate.sol:19"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:21"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:22"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:23"
            },
            {
              "contract": "MultiMiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MultiMiMaticLiquidate.sol:24"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1057": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "dd01021d28388df99dd12793f28e3cb03b4dff2f6775636bfbd64fa00eb09af6",
          "withoutMetadata": "302b0748d7d9d751e411d53785ffebf5ec542e15dad7b3167f817cf07b431a45",
          "linkedWithoutMetadata": "302b0748d7d9d751e411d53785ffebf5ec542e15dad7b3167f817cf07b431a45"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "approveAddresses(address[])",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MiMaticLiquidate.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1057",
              "src": "contracts\\MiMaticLiquidate.sol:14"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:15"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:16"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:18"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "approvedAddresses",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\MiMaticLiquidate.sol:19"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:21"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:22"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:23"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:24"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1057": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "6384137c25b43b380e2a94585166f250450b394a24e505a019577055fb740d32",
          "withoutMetadata": "1e7d3e2ba32bc6d2cac27df1018b5ab62be51eddc002e732d0f7c95219c7b5a9",
          "linkedWithoutMetadata": "1e7d3e2ba32bc6d2cac27df1018b5ab62be51eddc002e732d0f7c95219c7b5a9"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256)",
          "approveSwap(address,address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MiMaticLiquidate.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1057",
              "src": "contracts\\MiMaticLiquidate.sol:14"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:15"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:16"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:18"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:19"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:20"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:21"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:22"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1057": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "dbb3d4d2a428650cd34a35d5e10f517d636316bdfb57b91d6918ed463b59e752",
          "withoutMetadata": "c0a8aadb226b23d2bf0886e7dd21102a4d584aa67a3d1a9c723c20e69d121fa3",
          "linkedWithoutMetadata": "c0a8aadb226b23d2bf0886e7dd21102a4d584aa67a3d1a9c723c20e69d121fa3"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MiMaticLiquidate.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1057",
              "src": "contracts\\MiMaticLiquidate.sol:14"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:15"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:16"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:18"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:19"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:20"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:21"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:22"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1057": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "47ba3dc3cf85a29c1a816f5a37ae643a8d09530638ebf67dd1deb5d789fea992",
          "withoutMetadata": "1b84530f03878556d2f432d6bf78d897c4e4fd1a4958a8e6730db35aabbae830",
          "linkedWithoutMetadata": "1b84530f03878556d2f432d6bf78d897c4e4fd1a4958a8e6730db35aabbae830"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MiMaticLiquidate.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1057",
              "src": "contracts\\MiMaticLiquidate.sol:14"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:15"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:16"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:18"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:19"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:20"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:21"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:22"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1057": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "856f52c602a7cad770b3bd70bfa7eb66e8440e71bd0ac0272e299965a22a71d9",
          "withoutMetadata": "dbae3a020723b2a48572bfb1e02d3cc582a24aea5305de58d3e10d2c861919f2",
          "linkedWithoutMetadata": "dbae3a020723b2a48572bfb1e02d3cc582a24aea5305de58d3e10d2c861919f2"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MiMaticLiquidate.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1057",
              "src": "contracts\\MiMaticLiquidate.sol:14"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:15"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:16"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:18"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:19"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:20"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:21"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:22"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1057": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)",
          "liquidateVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:554",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:648",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "e42b6347cdb6a310c4df72719120d64546874d4c3c2fc1367f216b5f4b300a16",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "c14b7dda3fc007c2e62734d996fb4a31836ef6c2905b6c14ea505de10b53b692",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "5f290e890a07575421d64c32cf7853c686d8b0adf5e48e26bdcc53aca2b2f5f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "3867e6efe1ca17a6ce98e443669e2af1bdf5d6d1603bff914f95eeaa768292f7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "f3e6d23383f83913bf5ae83763c96e129f76095f88884586d4a019072c129d17",
          "withoutMetadata": "e796eff9631e0e6f1a85a6db0eb65d72c97a5d6079210c17281704dc5d52c9cf",
          "linkedWithoutMetadata": "e796eff9631e0e6f1a85a6db0eb65d72c97a5d6079210c17281704dc5d52c9cf"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "executeFlashLoan(address,uint256)",
          "liquidateVault(uint256,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "executeSwapMaticForTokens(address,uint256,address,uint256,uint256)",
          "executeSwapTokensForTokens(address,address,uint256,address,uint256,uint256)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidatedVault",
            "src": "contracts\\MiMaticLiquidate.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)666",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1057",
              "src": "contracts\\MiMaticLiquidate.sol:14"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:15"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:16"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:18"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidatedVault",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:19"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "liquidationCost",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:20"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "borrowedUsdc",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:21"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "timestamp",
              "type": "t_uint256",
              "src": "contracts\\MiMaticLiquidate.sol:22"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)666": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1057": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPool": {
        "src": "contracts\\TestLendingPool.sol:6",
        "version": {
          "withMetadata": "4e22d65e1b25cbe30048900ecf8b1c260dee2dca15df004cb3917beac18638d3",
          "withoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce",
          "linkedWithoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPoolAddressesProvider": {
        "src": "contracts\\TestLendingPoolAddressesProvider.sol:15",
        "version": {
          "withMetadata": "2611fe71a7cd41a270ba32a73173529f85e357131ccd1a9cb1fc9f31e3842743",
          "withoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa",
          "linkedWithoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa"
        },
        "inherit": [
          "ILendingPoolAddressesProvider",
          "Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getMarketId()",
          "setMarketId(string)",
          "setAddressAsProxy(bytes32,address)",
          "setAddress(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestLendingPoolAddressesProvider",
            "src": "contracts\\TestLendingPoolAddressesProvider.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_marketId",
              "type": "t_string_storage",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:16"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_addresses",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:17"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:552",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:646",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "4d6e1a1db5bc9f1e67786823b648b5a949507036849e8fea50e1eba0c2683e37",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "606f8327312318c5532195d8e2d6698ea8383cbcbd669bcabfc87145d64e09fd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "39572997a59cf76eae1697dc2229ecba471a7717e46d14d9fc949b871c080534",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "783ebfab8bb63c679909b6dc9db460bd6a76b24df3ece7053775be2665308cb6",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "c6819a331dd5f8ed118475a16df61a6f44453d240e6e359fd4f072a5adcd73e5",
          "withoutMetadata": "380d7bd07bab78a9479f38cb072c5a8c661eee83fae815ed04f0d5068c66ef6b",
          "linkedWithoutMetadata": "380d7bd07bab78a9479f38cb072c5a8c661eee83fae815ed04f0d5068c66ef6b"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "liquidateVault(uint256)",
          "executeFlashLoan(address,uint256)",
          "executeSwap(address,address,uint256,address,uint256,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)661",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1052",
              "src": "contracts\\MiMaticLiquidate.sol:14"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:15"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:16"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:18"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)661": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1052": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IQiLiquidator": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPaid()",
          "checkLiquidation(uint256)",
          "checkCost(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:552",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:646",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "4d6e1a1db5bc9f1e67786823b648b5a949507036849e8fea50e1eba0c2683e37",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "606f8327312318c5532195d8e2d6698ea8383cbcbd669bcabfc87145d64e09fd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "39572997a59cf76eae1697dc2229ecba471a7717e46d14d9fc949b871c080534",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "783ebfab8bb63c679909b6dc9db460bd6a76b24df3ece7053775be2665308cb6",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "e7b5b7bcc8b82e318d941fa7dae1c9e462f3624e29945a5eb60460c933994da7",
          "withoutMetadata": "e1caee91cc419678cfef96ef904fe2391c8670a6fb4c34af18002ca64ef76acd",
          "linkedWithoutMetadata": "e1caee91cc419678cfef96ef904fe2391c8670a6fb4c34af18002ca64ef76acd"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "liquidateVault(uint256)",
          "executeFlashLoan(address,uint256)",
          "executeSwap(address,address,uint256,address,uint256,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "qiLiquidator",
              "type": "t_contract(IQiLiquidator)661",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1052",
              "src": "contracts\\MiMaticLiquidate.sol:14"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:15"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:16"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:18"
            }
          ],
          "types": {
            "t_contract(IQiLiquidator)661": {
              "label": "contract IQiLiquidator"
            },
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1052": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPool": {
        "src": "contracts\\TestLendingPool.sol:6",
        "version": {
          "withMetadata": "29e58fbd13635036efcdb64f252cbe443e7b5529f007ba8316d4eadf784b587a",
          "withoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce",
          "linkedWithoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPoolAddressesProvider": {
        "src": "contracts\\TestLendingPoolAddressesProvider.sol:15",
        "version": {
          "withMetadata": "5ff84b19114b274311c3a2293d731978bfa527bcd05bc277ecb1136e09c857f5",
          "withoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa",
          "linkedWithoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa"
        },
        "inherit": [
          "ILendingPoolAddressesProvider",
          "Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getMarketId()",
          "setMarketId(string)",
          "setAddressAsProxy(bytes32,address)",
          "setAddress(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestLendingPoolAddressesProvider",
            "src": "contracts\\TestLendingPoolAddressesProvider.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_marketId",
              "type": "t_string_storage",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:16"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_addresses",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:17"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:638",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "943b995e36c7ae8e470b20bfb0ebbdcad4e04acfdab733bd5d21268daf682772",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "3207e84954af56085401f9a1e8745c2267f03b8ff5a8aa9c646c9b0fbdf7f8b9",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "7880f7d9927c318fbbe22be4862f367efbcf3ea17903b0192cff1095e4437908",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "e1c8d49285ed060797b83f7fabab4ad2c42f5cc2e9639411a0e479327c773b44",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "7112ba67f6acec8151b1622098259cd60dbd7bf7620f9e5c2e665fc6e2deae06",
          "withoutMetadata": "7f1f234b7e4f4098c89a7dec249498752816799b35eae23976ae7507f0a94d16",
          "linkedWithoutMetadata": "7f1f234b7e4f4098c89a7dec249498752816799b35eae23976ae7507f0a94d16"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address,address)",
          "executeFlashLoan(address,uint256)",
          "executeSwap(address,address,uint256,address,uint256,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "quickSwapRouter",
              "type": "t_contract(IUniswapV2Router02)1036",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:14"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:15"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:17"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IUniswapV2Router02)1036": {
              "label": "contract IUniswapV2Router02"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Interfaces.sol:544",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Interfaces.sol:638",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "943b995e36c7ae8e470b20bfb0ebbdcad4e04acfdab733bd5d21268daf682772",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "3207e84954af56085401f9a1e8745c2267f03b8ff5a8aa9c646c9b0fbdf7f8b9",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "7880f7d9927c318fbbe22be4862f367efbcf3ea17903b0192cff1095e4437908",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "e1c8d49285ed060797b83f7fabab4ad2c42f5cc2e9639411a0e479327c773b44",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "c3f3cf37a065d7edf4eead36fe996a79d1dcaedf9fb1a65344940f0941fc4cd6",
          "withoutMetadata": "c0b6aea47d0b00a9586706826ea0f99c4b977a0bd0c9a63faadb48126880b4bf",
          "linkedWithoutMetadata": "c0b6aea47d0b00a9586706826ea0f99c4b977a0bd0c9a63faadb48126880b4bf"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "executeFlashLoan(address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:10"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:14"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPool": {
        "src": "contracts\\TestLendingPool.sol:6",
        "version": {
          "withMetadata": "93275ea3b01a2b22d25e33f30d9fbbbf5afd3d0fdd786940c19fabd06b564d93",
          "withoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce",
          "linkedWithoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPoolAddressesProvider": {
        "src": "contracts\\TestLendingPoolAddressesProvider.sol:15",
        "version": {
          "withMetadata": "7829aab949665d4f77cdf609fc1aa4f808405c3bcb15ec4dca43910ecadbf92a",
          "withoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa",
          "linkedWithoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa"
        },
        "inherit": [
          "ILendingPoolAddressesProvider",
          "Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getMarketId()",
          "setMarketId(string)",
          "setAddressAsProxy(bytes32,address)",
          "setAddress(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestLendingPoolAddressesProvider",
            "src": "contracts\\TestLendingPoolAddressesProvider.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_marketId",
              "type": "t_string_storage",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:16"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_addresses",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:17"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "eb440f13e254d5306647c9374f75f3a2455ee8c1bb4e5b47588c6dabcd33a21b",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "3b4f6be56280e8e42d1d5622e73c6b17ff855a1c0b9e0d4b7c7d7c02a509efe4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "1c84d0c4845888fd4b23a2e71879bcf84356a29136e7abd9ead4f61cec03507a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "1f9556f064c814d020beeab954f5497f5d2aadafbbecb6ffa79c969da1fff17d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPool": {
        "src": "contracts\\TestLendingPool.sol:6",
        "version": {
          "withMetadata": "4eb4c05d118b571235d9ce8187542a989c66a3442af357e7b20d8655dde9e9e4",
          "withoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce",
          "linkedWithoutMetadata": "29150667a0806e06e1e1ad88762bbc531e3e000890a124cfd8056bce895fd6ce"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "eb440f13e254d5306647c9374f75f3a2455ee8c1bb4e5b47588c6dabcd33a21b",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "3b4f6be56280e8e42d1d5622e73c6b17ff855a1c0b9e0d4b7c7d7c02a509efe4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "1c84d0c4845888fd4b23a2e71879bcf84356a29136e7abd9ead4f61cec03507a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "1f9556f064c814d020beeab954f5497f5d2aadafbbecb6ffa79c969da1fff17d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPoolAddressesProvider": {
        "src": "contracts\\TestLendingPoolAddressesProvider.sol:15",
        "version": {
          "withMetadata": "2fc3067a45e3664536f8824185db77fd3808ac2e1e65b4680c2615213b72777d",
          "withoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa",
          "linkedWithoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa"
        },
        "inherit": [
          "ILendingPoolAddressesProvider",
          "Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getMarketId()",
          "setMarketId(string)",
          "setAddressAsProxy(bytes32,address)",
          "setAddress(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestLendingPoolAddressesProvider",
            "src": "contracts\\TestLendingPoolAddressesProvider.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_marketId",
              "type": "t_string_storage",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:16"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_addresses",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:17"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\TestLendingPoolAddressesProvider.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "eb440f13e254d5306647c9374f75f3a2455ee8c1bb4e5b47588c6dabcd33a21b",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "3b4f6be56280e8e42d1d5622e73c6b17ff855a1c0b9e0d4b7c7d7c02a509efe4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "1c84d0c4845888fd4b23a2e71879bcf84356a29136e7abd9ead4f61cec03507a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "1f9556f064c814d020beeab954f5497f5d2aadafbbecb6ffa79c969da1fff17d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPool": {
        "src": "contracts\\TestLendingPool.sol:6",
        "version": {
          "withMetadata": "82ddb11b88e21574f21eb9e24782add815c60efce014603fd667aa20a82d70bd",
          "withoutMetadata": "c0fb9607b7a5583a854b98c55ff78f27cd8b9ee93c2eeff4d4b949060c16dd84",
          "linkedWithoutMetadata": "c0fb9607b7a5583a854b98c55ff78f27cd8b9ee93c2eeff4d4b949060c16dd84"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "eb440f13e254d5306647c9374f75f3a2455ee8c1bb4e5b47588c6dabcd33a21b",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "3b4f6be56280e8e42d1d5622e73c6b17ff855a1c0b9e0d4b7c7d7c02a509efe4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "1c84d0c4845888fd4b23a2e71879bcf84356a29136e7abd9ead4f61cec03507a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "1f9556f064c814d020beeab954f5497f5d2aadafbbecb6ffa79c969da1fff17d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPoolAddressesProvider": {
        "src": "contracts\\TestLendingPoolAddressProvider.sol:15",
        "version": {
          "withMetadata": "e1484f2c22a0f72c0c62b3019e51d7dfc096bb8452c78975bfebab9483f6fe03",
          "withoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa",
          "linkedWithoutMetadata": "baf608ef124ebe57be0fea8e3c3f23d9189a7b552b322e7303de7b8ca34224aa"
        },
        "inherit": [
          "ILendingPoolAddressesProvider",
          "Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getMarketId()",
          "setMarketId(string)",
          "setAddressAsProxy(bytes32,address)",
          "setAddress(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestLendingPoolAddressesProvider",
            "src": "contracts\\TestLendingPoolAddressProvider.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_marketId",
              "type": "t_string_storage",
              "src": "contracts\\TestLendingPoolAddressProvider.sol:16"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_addresses",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\TestLendingPoolAddressProvider.sol:17"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\TestLendingPoolAddressProvider.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "eb440f13e254d5306647c9374f75f3a2455ee8c1bb4e5b47588c6dabcd33a21b",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "3b4f6be56280e8e42d1d5622e73c6b17ff855a1c0b9e0d4b7c7d7c02a509efe4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "1c84d0c4845888fd4b23a2e71879bcf84356a29136e7abd9ead4f61cec03507a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "1f9556f064c814d020beeab954f5497f5d2aadafbbecb6ffa79c969da1fff17d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LendingPool": {
        "src": "contracts\\TestLendingPool.sol:6",
        "version": {
          "withMetadata": "f61b6e82bc9c719ff23f6fd4ce1f96e0b266fdeba339eb4ad15cb9bc624f78dd",
          "withoutMetadata": "c0fb9607b7a5583a854b98c55ff78f27cd8b9ee93c2eeff4d4b949060c16dd84",
          "linkedWithoutMetadata": "c0fb9607b7a5583a854b98c55ff78f27cd8b9ee93c2eeff4d4b949060c16dd84"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "eb440f13e254d5306647c9374f75f3a2455ee8c1bb4e5b47588c6dabcd33a21b",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "3b4f6be56280e8e42d1d5622e73c6b17ff855a1c0b9e0d4b7c7d7c02a509efe4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "1c84d0c4845888fd4b23a2e71879bcf84356a29136e7abd9ead4f61cec03507a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "1f9556f064c814d020beeab954f5497f5d2aadafbbecb6ffa79c969da1fff17d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LendingPool": {
        "src": "contracts\\TestLendingPool.sol:6",
        "version": {
          "withMetadata": "722f040f5dc7f2ee1a7654a5775f2d0b16225b1deeafa7a38803070dd011c717",
          "withoutMetadata": "90e47d4ea31cee4f026739238fbdfe2e45911f5f699bfa9b617e609c5de4503c",
          "linkedWithoutMetadata": "90e47d4ea31cee4f026739238fbdfe2e45911f5f699bfa9b617e609c5de4503c"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPoolAddressesProvider": {
        "src": "contracts\\TestLendingPoolAddressProvider.sol:15",
        "version": {
          "withMetadata": "2adedefb6d785f68181b2c4cb823e98da9ffc233b039d3da3246972202f851c3",
          "withoutMetadata": "578e448cb5a8bcd1f1a2d29959fe1769ef098e0cd73a76f28e312d9448b4e352",
          "linkedWithoutMetadata": "578e448cb5a8bcd1f1a2d29959fe1769ef098e0cd73a76f28e312d9448b4e352"
        },
        "inherit": [
          "ILendingPoolAddressesProvider",
          "Ownable"
        ],
        "libraries": [],
        "methods": [
          "setLendingPool(address)",
          "getMarketId()",
          "setMarketId(string)",
          "setAddressAsProxy(bytes32,address)",
          "setAddress(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_marketId",
              "type": "t_string_storage",
              "src": "contracts\\TestLendingPoolAddressProvider.sol:16"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_addresses",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\TestLendingPoolAddressProvider.sol:17"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\TestLendingPoolAddressProvider.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "eb440f13e254d5306647c9374f75f3a2455ee8c1bb4e5b47588c6dabcd33a21b",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "3b4f6be56280e8e42d1d5622e73c6b17ff855a1c0b9e0d4b7c7d7c02a509efe4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "1c84d0c4845888fd4b23a2e71879bcf84356a29136e7abd9ead4f61cec03507a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "1f9556f064c814d020beeab954f5497f5d2aadafbbecb6ffa79c969da1fff17d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestLendingPoolAddressesProvider": {
        "src": "contracts\\TestLendingPoolAddressProvider.sol:15",
        "version": {
          "withMetadata": "36ebdc333a4a42c7d8101e8302ef50ec5f2bc5e3aacd8ad29feaedd14c3f552e",
          "withoutMetadata": "578e448cb5a8bcd1f1a2d29959fe1769ef098e0cd73a76f28e312d9448b4e352",
          "linkedWithoutMetadata": "578e448cb5a8bcd1f1a2d29959fe1769ef098e0cd73a76f28e312d9448b4e352"
        },
        "inherit": [
          "ILendingPoolAddressesProvider",
          "Ownable"
        ],
        "libraries": [],
        "methods": [
          "setLendingPool(address)",
          "getMarketId()",
          "setMarketId(string)",
          "setAddressAsProxy(bytes32,address)",
          "setAddress(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_marketId",
              "type": "t_string_storage",
              "src": "contracts\\TestLendingPoolAddressProvider.sol:16"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "_addresses",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\TestLendingPoolAddressProvider.sol:17"
            },
            {
              "contract": "TestLendingPoolAddressesProvider",
              "label": "lendingPool",
              "type": "t_address",
              "src": "contracts\\TestLendingPoolAddressProvider.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "eb440f13e254d5306647c9374f75f3a2455ee8c1bb4e5b47588c6dabcd33a21b",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "3b4f6be56280e8e42d1d5622e73c6b17ff855a1c0b9e0d4b7c7d7c02a509efe4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "1c84d0c4845888fd4b23a2e71879bcf84356a29136e7abd9ead4f61cec03507a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "1f9556f064c814d020beeab954f5497f5d2aadafbbecb6ffa79c969da1fff17d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "a3caace324ee1946cd93081b1a52ba902eff6b1b3ce169630b13ce34dcf370ad",
          "withoutMetadata": "c0b6aea47d0b00a9586706826ea0f99c4b977a0bd0c9a63faadb48126880b4bf",
          "linkedWithoutMetadata": "c0b6aea47d0b00a9586706826ea0f99c4b977a0bd0c9a63faadb48126880b4bf"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "executeFlashLoan(address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:10"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "miMatic",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:14"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "49119b76f302a1f12c31b78155b133f6a35ee81eaf406cc85ca51ae7c645cb58",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:33",
        "version": {
          "withMetadata": "a2637b8c03a5b48373f9a26eebbc39943c8d3008ca0c70c0eccc623a9deb2fcd",
          "withoutMetadata": "6d918ce87ff34491a5664db4d11f2229ab410489e02a632103d7aa7328611f02",
          "linkedWithoutMetadata": "6d918ce87ff34491a5664db4d11f2229ab410489e02a632103d7aa7328611f02"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestERC20": {
        "src": "contracts\\TestERC20.sol:5",
        "version": {
          "withMetadata": "e8d129cd30802612e49095db463052eebac7f38629d7e347bacc94527a7ef978",
          "withoutMetadata": "168180b87b666b7af96f9a6f1320fb5f97ff224a7bf5d24ce8a1d0d59896129b",
          "linkedWithoutMetadata": "168180b87b666b7af96f9a6f1320fb5f97ff224a7bf5d24ce8a1d0d59896129b"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC20",
            "src": "contracts\\TestERC20.sol:6"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "eb440f13e254d5306647c9374f75f3a2455ee8c1bb4e5b47588c6dabcd33a21b",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "3b4f6be56280e8e42d1d5622e73c6b17ff855a1c0b9e0d4b7c7d7c02a509efe4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "1c84d0c4845888fd4b23a2e71879bcf84356a29136e7abd9ead4f61cec03507a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "1f9556f064c814d020beeab954f5497f5d2aadafbbecb6ffa79c969da1fff17d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "e96fd8347c2099da33bc5bdf290c87b744e80a4aeef6e6786494331ea0a8ff22",
          "withoutMetadata": "45b25e465e992de261c73ae07757f56f25f94251ff464acdec1cd997e2bbd3ad",
          "linkedWithoutMetadata": "45b25e465e992de261c73ae07757f56f25f94251ff464acdec1cd997e2bbd3ad"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "executeFlashLoan(address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:10"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "eb440f13e254d5306647c9374f75f3a2455ee8c1bb4e5b47588c6dabcd33a21b",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "3b4f6be56280e8e42d1d5622e73c6b17ff855a1c0b9e0d4b7c7d7c02a509efe4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "1c84d0c4845888fd4b23a2e71879bcf84356a29136e7abd9ead4f61cec03507a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "1f9556f064c814d020beeab954f5497f5d2aadafbbecb6ffa79c969da1fff17d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "74daa92cc842fdc02a4f44d4f89f38d020b69f924fa4a84b19f3d4bf31f2c1a0",
          "withoutMetadata": "c0471085f0ca86a0a0844c1ccebe7015a6e619a0654c7873baddc5d887676536",
          "linkedWithoutMetadata": "c0471085f0ca86a0a0844c1ccebe7015a6e619a0654c7873baddc5d887676536"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "executeFlashLoan(address,uint256)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:10"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "eb440f13e254d5306647c9374f75f3a2455ee8c1bb4e5b47588c6dabcd33a21b",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "3b4f6be56280e8e42d1d5622e73c6b17ff855a1c0b9e0d4b7c7d7c02a509efe4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "1c84d0c4845888fd4b23a2e71879bcf84356a29136e7abd9ead4f61cec03507a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "1f9556f064c814d020beeab954f5497f5d2aadafbbecb6ffa79c969da1fff17d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "acf4c006fba0cd7394ef507c32f789171ae41c08b86efbd13766626592b79487",
          "withoutMetadata": "f876893ccb86816a62bec0640bda5ffdc7babaf60247254dbc6e502302489b68",
          "linkedWithoutMetadata": "f876893ccb86816a62bec0640bda5ffdc7babaf60247254dbc6e502302489b68"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "executeFlashLoan()",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:10"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "eb440f13e254d5306647c9374f75f3a2455ee8c1bb4e5b47588c6dabcd33a21b",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "3b4f6be56280e8e42d1d5622e73c6b17ff855a1c0b9e0d4b7c7d7c02a509efe4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "1c84d0c4845888fd4b23a2e71879bcf84356a29136e7abd9ead4f61cec03507a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "1f9556f064c814d020beeab954f5497f5d2aadafbbecb6ffa79c969da1fff17d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "cfe7afeded532a7d6c4d315c1b399f83f23ae9e667c66f28a330b322e3c53435",
          "withoutMetadata": "f6f023384d4e7972faa29d8f22da0de108e7818cf2dae4b809da68ecaa901a74",
          "linkedWithoutMetadata": "f6f023384d4e7972faa29d8f22da0de108e7818cf2dae4b809da68ecaa901a74"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:10"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_contract(IERC20)127",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)645",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)645": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "eb440f13e254d5306647c9374f75f3a2455ee8c1bb4e5b47588c6dabcd33a21b",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "3b4f6be56280e8e42d1d5622e73c6b17ff855a1c0b9e0d4b7c7d7c02a509efe4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "1c84d0c4845888fd4b23a2e71879bcf84356a29136e7abd9ead4f61cec03507a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "1f9556f064c814d020beeab954f5497f5d2aadafbbecb6ffa79c969da1fff17d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:8",
        "version": {
          "withMetadata": "b5a415b2702f1450afe1fa850669e51c80a938f9baa9377b8f6a339cd0608d23",
          "withoutMetadata": "f6f023384d4e7972faa29d8f22da0de108e7818cf2dae4b809da68ecaa901a74",
          "linkedWithoutMetadata": "f6f023384d4e7972faa29d8f22da0de108e7818cf2dae4b809da68ecaa901a74"
        },
        "inherit": [
          "Ownable",
          "FlashLoanReceiverBase",
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "rugPull()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddressProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)281",
              "src": "contracts\\MiMaticLiquidate.sol:10"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:12"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPoolAddress",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:13"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)281": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "49119b76f302a1f12c31b78155b133f6a35ee81eaf406cc85ca51ae7c645cb58",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:33",
        "version": {
          "withMetadata": "a2637b8c03a5b48373f9a26eebbc39943c8d3008ca0c70c0eccc623a9deb2fcd",
          "withoutMetadata": "6d918ce87ff34491a5664db4d11f2229ab410489e02a632103d7aa7328611f02",
          "linkedWithoutMetadata": "6d918ce87ff34491a5664db4d11f2229ab410489e02a632103d7aa7328611f02"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BaseERC20": {
        "src": "contracts\\BaseERC20.sol:5",
        "version": {
          "withMetadata": "cf7ef0453caebbee594bdd9d31ebda55686dca84c3657aa1af225c019b67f400",
          "withoutMetadata": "168180b87b666b7af96f9a6f1320fb5f97ff224a7bf5d24ce8a1d0d59896129b",
          "linkedWithoutMetadata": "168180b87b666b7af96f9a6f1320fb5f97ff224a7bf5d24ce8a1d0d59896129b"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseERC20",
            "src": "contracts\\BaseERC20.sol:6"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "49119b76f302a1f12c31b78155b133f6a35ee81eaf406cc85ca51ae7c645cb58",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:33",
        "version": {
          "withMetadata": "a2637b8c03a5b48373f9a26eebbc39943c8d3008ca0c70c0eccc623a9deb2fcd",
          "withoutMetadata": "6d918ce87ff34491a5664db4d11f2229ab410489e02a632103d7aa7328611f02",
          "linkedWithoutMetadata": "6d918ce87ff34491a5664db4d11f2229ab410489e02a632103d7aa7328611f02"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BaseERC20": {
        "src": "contracts\\BaseERC20.sol:5",
        "version": {
          "withMetadata": "52b10956c75ae2d0076d13777896e4e5ea0f52ef673f26010d7f331380a6873d",
          "withoutMetadata": "4823e29777ffcece27b61c67c6301a8b0d28e427d777d1996ea4b9becfb2ccac",
          "linkedWithoutMetadata": "4823e29777ffcece27b61c67c6301a8b0d28e427d777d1996ea4b9becfb2ccac"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseERC20",
            "src": "contracts\\BaseERC20.sol:6"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "49119b76f302a1f12c31b78155b133f6a35ee81eaf406cc85ca51ae7c645cb58",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:8",
        "version": {
          "withMetadata": "98bbeab2f2ff50ca857ab792bbcab8e7b2d9757c61d0de84691741059e29c52c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\ERC20.sol:34",
        "version": {
          "withMetadata": "5ca5460433d62365f232ff022c849896c35e929e7a48180aae4415488bec8dd4",
          "withoutMetadata": "42042ece0e727b05ef4536bb061d9a19fbd1269c0d6b8bbf507aaebf32d84feb",
          "linkedWithoutMetadata": "42042ece0e727b05ef4536bb061d9a19fbd1269c0d6b8bbf507aaebf32d84feb"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string,uint8)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts\\ERC20.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\ERC20.sol:44"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\ERC20.sol:45"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\ERC20.sol:46"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "49119b76f302a1f12c31b78155b133f6a35ee81eaf406cc85ca51ae7c645cb58",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:8",
        "version": {
          "withMetadata": "98bbeab2f2ff50ca857ab792bbcab8e7b2d9757c61d0de84691741059e29c52c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\ERC20.sol:34",
        "version": {
          "withMetadata": "a5bff1c12c24c41f65b2e288374a05b16232faa5e54627956dee747e301ff27e",
          "withoutMetadata": "0d7e3898260b62d0968e9a2f37035b6be9d41ecd5371eb30a7267c3e66b1e83b",
          "linkedWithoutMetadata": "0d7e3898260b62d0968e9a2f37035b6be9d41ecd5371eb30a7267c3e66b1e83b"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string,uint8)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts\\ERC20.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\ERC20.sol:44"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\ERC20.sol:45"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\ERC20.sol:46"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "contracts\\Libraries.sol:7",
        "version": {
          "withMetadata": "1f9556f064c814d020beeab954f5497f5d2aadafbbecb6ffa79c969da1fff17d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Interfaces.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\Libraries.sol:155",
        "version": {
          "withMetadata": "eb440f13e254d5306647c9374f75f3a2455ee8c1bb4e5b47588c6dabcd33a21b",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\ERC20.sol:34",
        "version": {
          "withMetadata": "2da21787bc12b786131e4976ce2c770204d37594fce8fcf8d98f49c2908d5fc0",
          "withoutMetadata": "4cb004c3fb615d4f7bde3caddbdc633e6af1c3d35c758b1ef00a30ecbffa8312",
          "linkedWithoutMetadata": "4cb004c3fb615d4f7bde3caddbdc633e6af1c3d35c758b1ef00a30ecbffa8312"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string,uint8)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts\\ERC20.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\ERC20.sol:44"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\ERC20.sol:45"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\ERC20.sol:46"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanReceiverBase": {
        "src": "contracts\\FlashLoanReceiverBase.sol:7",
        "inherit": [
          "IFlashLoanReceiver"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiverBase",
            "src": "contracts\\FlashLoanReceiverBase.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_addressesProvider",
              "type": "t_contract(ILendingPoolAddressesProvider)1545",
              "src": "contracts\\FlashLoanReceiverBase.sol:11"
            },
            {
              "contract": "FlashLoanReceiverBase",
              "label": "_lendingPool",
              "type": "t_contract(ILendingPool)1909",
              "src": "contracts\\FlashLoanReceiverBase.sol:12"
            }
          ],
          "types": {
            "t_contract(ILendingPoolAddressesProvider)1545": {
              "label": "contract ILendingPoolAddressesProvider"
            },
            "t_contract(ILendingPool)1909": {
              "label": "contract ILendingPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanReceiver": {
        "src": "contracts\\Interfaces.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPool": {
        "src": "contracts\\Interfaces.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts\\Interfaces.sol:102",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts\\Libraries.sol:270",
        "version": {
          "withMetadata": "3b4f6be56280e8e42d1d5622e73c6b17ff855a1c0b9e0d4b7c7d7c02a509efe4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Libraries.sol:222",
        "version": {
          "withMetadata": "1c84d0c4845888fd4b23a2e71879bcf84356a29136e7abd9ead4f61cec03507a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MiMaticLiquidate": {
        "src": "contracts\\MiMaticLiquidate.sol:6",
        "version": {
          "withMetadata": "447fd7147f763e60fe9cf08f3ebe2f2e306ec2947577659df81f7fe479e6cbd0",
          "withoutMetadata": "6de44766bc598ab9905071745568985d14c644eadee8bb10139fa61c7a05de98",
          "linkedWithoutMetadata": "6de44766bc598ab9905071745568985d14c644eadee8bb10139fa61c7a05de98"
        },
        "inherit": [
          "Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "rugPull()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MiMaticLiquidate",
            "src": "contracts\\MiMaticLiquidate.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MiMaticLiquidate",
              "label": "aaveLendingPool",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:8"
            },
            {
              "contract": "MiMaticLiquidate",
              "label": "usdc",
              "type": "t_address",
              "src": "contracts\\MiMaticLiquidate.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Ownable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Ownable.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Ownable.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}